[
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "WebSocket",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "validate_and_convert_form_questions",
        "importPath": "app.services.job_application.utils",
        "description": "app.services.job_application.utils",
        "isExtraImport": true,
        "detail": "app.services.job_application.utils",
        "documentation": {}
    },
    {
        "label": "validate_and_convert_form_questions",
        "importPath": "app.services.job_application.utils",
        "description": "app.services.job_application.utils",
        "isExtraImport": true,
        "detail": "app.services.job_application.utils",
        "documentation": {}
    },
    {
        "label": "take_screenshot",
        "importPath": "app.services.job_application.utils",
        "description": "app.services.job_application.utils",
        "isExtraImport": true,
        "detail": "app.services.job_application.utils",
        "documentation": {}
    },
    {
        "label": "cleanup_screenshot",
        "importPath": "app.services.job_application.utils",
        "description": "app.services.job_application.utils",
        "isExtraImport": true,
        "detail": "app.services.job_application.utils",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "psycopg2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2",
        "description": "psycopg2",
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "RealDictCursor",
        "importPath": "psycopg2.extras",
        "description": "psycopg2.extras",
        "isExtraImport": true,
        "detail": "psycopg2.extras",
        "documentation": {}
    },
    {
        "label": "RealDictCursor",
        "importPath": "psycopg2.extras",
        "description": "psycopg2.extras",
        "isExtraImport": true,
        "detail": "psycopg2.extras",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "MetaData",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "URL",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "desc",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "JSON",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "MetaData",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "URL",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "boto3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "boto3",
        "description": "boto3",
        "detail": "boto3",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.db.postgres",
        "description": "app.db.postgres",
        "isExtraImport": true,
        "detail": "app.db.postgres",
        "documentation": {}
    },
    {
        "label": "postgres_manager",
        "importPath": "app.db.postgres",
        "description": "app.db.postgres",
        "isExtraImport": true,
        "detail": "app.db.postgres",
        "documentation": {}
    },
    {
        "label": "postgres_manager",
        "importPath": "app.db.postgres",
        "description": "app.db.postgres",
        "isExtraImport": true,
        "detail": "app.db.postgres",
        "documentation": {}
    },
    {
        "label": "PostgresManager",
        "importPath": "app.db.postgres",
        "description": "app.db.postgres",
        "isExtraImport": true,
        "detail": "app.db.postgres",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "app.db.models",
        "description": "app.db.models",
        "isExtraImport": true,
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "JobResponse",
        "importPath": "app.schemas.job",
        "description": "app.schemas.job",
        "isExtraImport": true,
        "detail": "app.schemas.job",
        "documentation": {}
    },
    {
        "label": "JobFilters",
        "importPath": "app.schemas.job",
        "description": "app.schemas.job",
        "isExtraImport": true,
        "detail": "app.schemas.job",
        "documentation": {}
    },
    {
        "label": "JobsPaginatedResponse",
        "importPath": "app.schemas.job",
        "description": "app.schemas.job",
        "isExtraImport": true,
        "detail": "app.schemas.job",
        "documentation": {}
    },
    {
        "label": "JobsCountResponse",
        "importPath": "app.schemas.job",
        "description": "app.schemas.job",
        "isExtraImport": true,
        "detail": "app.schemas.job",
        "documentation": {}
    },
    {
        "label": "JobsSearchResponse",
        "importPath": "app.schemas.job",
        "description": "app.schemas.job",
        "isExtraImport": true,
        "detail": "app.schemas.job",
        "documentation": {}
    },
    {
        "label": "stripe",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "stripe",
        "description": "stripe",
        "detail": "stripe",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "redis_client",
        "importPath": "app.services.websocket",
        "description": "app.services.websocket",
        "isExtraImport": true,
        "detail": "app.services.websocket",
        "documentation": {}
    },
    {
        "label": "send_job_application_update",
        "importPath": "app.services.websocket",
        "description": "app.services.websocket",
        "isExtraImport": true,
        "detail": "app.services.websocket",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "HttpUrl",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "HttpUrl",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "firebase_admin",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "firestore",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "credentials",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "credentials",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "FieldFilter",
        "importPath": "google.cloud.firestore_v1.base_query",
        "description": "google.cloud.firestore_v1.base_query",
        "isExtraImport": true,
        "detail": "google.cloud.firestore_v1.base_query",
        "documentation": {}
    },
    {
        "label": "ApplicationStatus",
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "isExtraImport": true,
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "QuestionType",
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "isExtraImport": true,
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "Education",
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "isExtraImport": true,
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "FormQuestion",
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "isExtraImport": true,
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "FormSectionType",
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "isExtraImport": true,
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "QuestionType",
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "isExtraImport": true,
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "QuestionType",
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "isExtraImport": true,
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "QuestionType",
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "isExtraImport": true,
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "QuestionType",
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "isExtraImport": true,
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "QuestionType",
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "isExtraImport": true,
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "FormQuestion",
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "isExtraImport": true,
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "FormSectionType",
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "isExtraImport": true,
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "QuestionType",
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "isExtraImport": true,
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "QuestionType",
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "isExtraImport": true,
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "QuestionType",
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "isExtraImport": true,
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "FormQuestion",
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "isExtraImport": true,
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "ApplicationStatus",
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "isExtraImport": true,
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.db.base",
        "description": "app.db.base",
        "isExtraImport": true,
        "detail": "app.db.base",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "scrape_jobs",
        "importPath": "jobspy",
        "description": "jobspy",
        "isExtraImport": true,
        "detail": "jobspy",
        "documentation": {}
    },
    {
        "label": "INDUSTRY_SPECIALIZATION_MAPPING",
        "importPath": "app.services.job_application.types",
        "description": "app.services.job_application.types",
        "isExtraImport": true,
        "detail": "app.services.job_application.types",
        "documentation": {}
    },
    {
        "label": "LOCATION_TYPE_OPTIONS",
        "importPath": "app.services.job_application.types",
        "description": "app.services.job_application.types",
        "isExtraImport": true,
        "detail": "app.services.job_application.types",
        "documentation": {}
    },
    {
        "label": "ROLE_LEVEL_MAPPING",
        "importPath": "app.services.job_application.types",
        "description": "app.services.job_application.types",
        "isExtraImport": true,
        "detail": "app.services.job_application.types",
        "documentation": {}
    },
    {
        "label": "SUPPORTED_JOB_PORTALS",
        "importPath": "app.services.job_application.types",
        "description": "app.services.job_application.types",
        "isExtraImport": true,
        "detail": "app.services.job_application.types",
        "documentation": {}
    },
    {
        "label": "get_field_type",
        "importPath": "app.services.job_application.types",
        "description": "app.services.job_application.types",
        "isExtraImport": true,
        "detail": "app.services.job_application.types",
        "documentation": {}
    },
    {
        "label": "map_profile_value",
        "importPath": "app.services.job_application.types",
        "description": "app.services.job_application.types",
        "isExtraImport": true,
        "detail": "app.services.job_application.types",
        "documentation": {}
    },
    {
        "label": "DEMOGRAPHIC_FIELDS",
        "importPath": "app.services.job_application.types",
        "description": "app.services.job_application.types",
        "isExtraImport": true,
        "detail": "app.services.job_application.types",
        "documentation": {}
    },
    {
        "label": "get_field_type",
        "importPath": "app.services.job_application.types",
        "description": "app.services.job_application.types",
        "isExtraImport": true,
        "detail": "app.services.job_application.types",
        "documentation": {}
    },
    {
        "label": "get_field_type",
        "importPath": "app.services.job_application.types",
        "description": "app.services.job_application.types",
        "isExtraImport": true,
        "detail": "app.services.job_application.types",
        "documentation": {}
    },
    {
        "label": "get_field_type",
        "importPath": "app.services.job_application.types",
        "description": "app.services.job_application.types",
        "isExtraImport": true,
        "detail": "app.services.job_application.types",
        "documentation": {}
    },
    {
        "label": "JobPortal",
        "importPath": "app.services.job_application.types",
        "description": "app.services.job_application.types",
        "isExtraImport": true,
        "detail": "app.services.job_application.types",
        "documentation": {}
    },
    {
        "label": "JobPortal",
        "importPath": "app.services.job_application.types",
        "description": "app.services.job_application.types",
        "isExtraImport": true,
        "detail": "app.services.job_application.types",
        "documentation": {}
    },
    {
        "label": "AIAssistant",
        "importPath": "app.services.ai_assistant",
        "description": "app.services.ai_assistant",
        "isExtraImport": true,
        "detail": "app.services.ai_assistant",
        "documentation": {}
    },
    {
        "label": "AIAssistant",
        "importPath": "app.services.ai_assistant",
        "description": "app.services.ai_assistant",
        "isExtraImport": true,
        "detail": "app.services.ai_assistant",
        "documentation": {}
    },
    {
        "label": "AIAssistant",
        "importPath": "app.services.ai_assistant",
        "description": "app.services.ai_assistant",
        "isExtraImport": true,
        "detail": "app.services.ai_assistant",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "Select",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "jaccard",
        "importPath": "textdistance",
        "description": "textdistance",
        "isExtraImport": true,
        "detail": "textdistance",
        "documentation": {}
    },
    {
        "label": "levenshtein",
        "importPath": "textdistance",
        "description": "textdistance",
        "isExtraImport": true,
        "detail": "textdistance",
        "documentation": {}
    },
    {
        "label": "CustomWebDriver",
        "importPath": "app.services.browser",
        "description": "app.services.browser",
        "isExtraImport": true,
        "detail": "app.services.browser",
        "documentation": {}
    },
    {
        "label": "CustomWebDriver",
        "importPath": "app.services.browser",
        "description": "app.services.browser",
        "isExtraImport": true,
        "detail": "app.services.browser",
        "documentation": {}
    },
    {
        "label": "browser_pool",
        "importPath": "app.services.browser",
        "description": "app.services.browser",
        "isExtraImport": true,
        "detail": "app.services.browser",
        "documentation": {}
    },
    {
        "label": "clean_string",
        "importPath": "app.services.job_application.utils.helpers",
        "description": "app.services.job_application.utils.helpers",
        "isExtraImport": true,
        "detail": "app.services.job_application.utils.helpers",
        "documentation": {}
    },
    {
        "label": "storage_manager",
        "importPath": "app.services.storage",
        "description": "app.services.storage",
        "isExtraImport": true,
        "detail": "app.services.storage",
        "documentation": {}
    },
    {
        "label": "storage_manager",
        "importPath": "app.services.storage",
        "description": "app.services.storage",
        "isExtraImport": true,
        "detail": "app.services.storage",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "TimeoutException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "ElementClickInterceptedException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "StaleElementReferenceException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "Lever",
        "importPath": "app.services.job_application.portals",
        "description": "app.services.job_application.portals",
        "isExtraImport": true,
        "detail": "app.services.job_application.portals",
        "documentation": {}
    },
    {
        "label": "Greenhouse",
        "importPath": "app.services.job_application.portals",
        "description": "app.services.job_application.portals",
        "isExtraImport": true,
        "detail": "app.services.job_application.portals",
        "documentation": {}
    },
    {
        "label": "Ashby",
        "importPath": "app.services.job_application.portals",
        "description": "app.services.job_application.portals",
        "isExtraImport": true,
        "detail": "app.services.job_application.portals",
        "documentation": {}
    },
    {
        "label": "Jobvite",
        "importPath": "app.services.job_application.portals",
        "description": "app.services.job_application.portals",
        "isExtraImport": true,
        "detail": "app.services.job_application.portals",
        "documentation": {}
    },
    {
        "label": "Workable",
        "importPath": "app.services.job_application.portals",
        "description": "app.services.job_application.portals",
        "isExtraImport": true,
        "detail": "app.services.job_application.portals",
        "documentation": {}
    },
    {
        "label": "letter",
        "importPath": "reportlab.lib.pagesizes",
        "description": "reportlab.lib.pagesizes",
        "isExtraImport": true,
        "detail": "reportlab.lib.pagesizes",
        "documentation": {}
    },
    {
        "label": "SimpleDocTemplate",
        "importPath": "reportlab.platypus",
        "description": "reportlab.platypus",
        "isExtraImport": true,
        "detail": "reportlab.platypus",
        "documentation": {}
    },
    {
        "label": "Paragraph",
        "importPath": "reportlab.platypus",
        "description": "reportlab.platypus",
        "isExtraImport": true,
        "detail": "reportlab.platypus",
        "documentation": {}
    },
    {
        "label": "Spacer",
        "importPath": "reportlab.platypus",
        "description": "reportlab.platypus",
        "isExtraImport": true,
        "detail": "reportlab.platypus",
        "documentation": {}
    },
    {
        "label": "PageTemplate",
        "importPath": "reportlab.platypus",
        "description": "reportlab.platypus",
        "isExtraImport": true,
        "detail": "reportlab.platypus",
        "documentation": {}
    },
    {
        "label": "Frame",
        "importPath": "reportlab.platypus",
        "description": "reportlab.platypus",
        "isExtraImport": true,
        "detail": "reportlab.platypus",
        "documentation": {}
    },
    {
        "label": "getSampleStyleSheet",
        "importPath": "reportlab.lib.styles",
        "description": "reportlab.lib.styles",
        "isExtraImport": true,
        "detail": "reportlab.lib.styles",
        "documentation": {}
    },
    {
        "label": "ParagraphStyle",
        "importPath": "reportlab.lib.styles",
        "description": "reportlab.lib.styles",
        "isExtraImport": true,
        "detail": "reportlab.lib.styles",
        "documentation": {}
    },
    {
        "label": "colors",
        "importPath": "reportlab.lib",
        "description": "reportlab.lib",
        "isExtraImport": true,
        "detail": "reportlab.lib",
        "documentation": {}
    },
    {
        "label": "stringWidth",
        "importPath": "reportlab.pdfbase.pdfmetrics",
        "description": "reportlab.pdfbase.pdfmetrics",
        "isExtraImport": true,
        "detail": "reportlab.pdfbase.pdfmetrics",
        "documentation": {}
    },
    {
        "label": "google.generativeai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "google.generativeai",
        "description": "google.generativeai",
        "detail": "google.generativeai",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "undetected_chromedriver",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "undetected_chromedriver",
        "description": "undetected_chromedriver",
        "detail": "undetected_chromedriver",
        "documentation": {}
    },
    {
        "label": "stealth",
        "importPath": "selenium_stealth",
        "description": "selenium_stealth",
        "isExtraImport": true,
        "detail": "selenium_stealth",
        "documentation": {}
    },
    {
        "label": "redis.asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "redis.asyncio",
        "description": "redis.asyncio",
        "detail": "redis.asyncio",
        "documentation": {}
    },
    {
        "label": "Celery",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "current_task",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "celery_app",
        "importPath": "app.tasks.celery_app",
        "description": "app.tasks.celery_app",
        "isExtraImport": true,
        "detail": "app.tasks.celery_app",
        "documentation": {}
    },
    {
        "label": "firestore_manager",
        "importPath": "app.db.firestore",
        "description": "app.db.firestore",
        "isExtraImport": true,
        "detail": "app.db.firestore",
        "documentation": {}
    },
    {
        "label": "JobApplicationService",
        "importPath": "app.services.job_application",
        "description": "app.services.job_application",
        "isExtraImport": true,
        "detail": "app.services.job_application",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "atexit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "atexit",
        "description": "atexit",
        "detail": "atexit",
        "documentation": {}
    },
    {
        "label": "signal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "signal",
        "description": "signal",
        "detail": "signal",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "JobFetcher",
        "importPath": "app.services.fetch_jobs.main",
        "description": "app.services.fetch_jobs.main",
        "isExtraImport": true,
        "detail": "app.services.fetch_jobs.main",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "pformat",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "jmespath",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jmespath",
        "description": "jmespath",
        "detail": "jmespath",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "jmespath",
        "description": "jmespath",
        "isExtraImport": true,
        "detail": "jmespath",
        "documentation": {}
    },
    {
        "label": "check_celery_connection",
        "kind": 2,
        "importPath": "app.api.routes.applications",
        "description": "app.api.routes.applications",
        "peekOfCode": "def check_celery_connection():\n    \"\"\"Check if Celery broker is available and workers are running\"\"\"\n    try:\n        from celery import current_app\n        # Check broker connection\n        inspect = current_app.control.inspect()\n        # Get active workers - this will fail if broker is down\n        active_workers = inspect.active()\n        if not active_workers:\n            return False, \"No Celery workers are running\"",
        "detail": "app.api.routes.applications",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.api.routes.applications",
        "description": "app.api.routes.applications",
        "peekOfCode": "router = APIRouter()\nlogger = logging.getLogger(__name__)\ndef check_celery_connection():\n    \"\"\"Check if Celery broker is available and workers are running\"\"\"\n    try:\n        from celery import current_app\n        # Check broker connection\n        inspect = current_app.control.inspect()\n        # Get active workers - this will fail if broker is down\n        active_workers = inspect.active()",
        "detail": "app.api.routes.applications",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.api.routes.applications",
        "description": "app.api.routes.applications",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef check_celery_connection():\n    \"\"\"Check if Celery broker is available and workers are running\"\"\"\n    try:\n        from celery import current_app\n        # Check broker connection\n        inspect = current_app.control.inspect()\n        # Get active workers - this will fail if broker is down\n        active_workers = inspect.active()\n        if not active_workers:",
        "detail": "app.api.routes.applications",
        "documentation": {}
    },
    {
        "label": "convert_job_to_response",
        "kind": 2,
        "importPath": "app.api.routes.jobs",
        "description": "app.api.routes.jobs",
        "peekOfCode": "def convert_job_to_response(job: Job) -> JobResponse:\n    \"\"\"Convert SQLAlchemy Job model to Pydantic JobResponse\"\"\"\n    try:\n        # Convert to dict and handle None values for list fields\n        job_dict = {\n            'id': job.id,\n            'title': job.title,\n            'company': job.company,\n            'company_url': job.company_url,\n            'logo': job.logo,",
        "detail": "app.api.routes.jobs",
        "documentation": {}
    },
    {
        "label": "convert_jobs_to_response",
        "kind": 2,
        "importPath": "app.api.routes.jobs",
        "description": "app.api.routes.jobs",
        "peekOfCode": "def convert_jobs_to_response(jobs: List[Job]) -> List[JobResponse]:\n    \"\"\"Convert list of SQLAlchemy Job models to Pydantic JobResponse models\"\"\"\n    try:\n        logger.info(f\"Converting {len(jobs)} jobs to response format\")\n        result = [convert_job_to_response(job) for job in jobs]\n        logger.info(f\"Successfully converted {len(result)} jobs\")\n        return result\n    except Exception as e:\n        logger.error(f\"Error converting jobs list to response: {e}\")\n        raise e",
        "detail": "app.api.routes.jobs",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.api.routes.jobs",
        "description": "app.api.routes.jobs",
        "peekOfCode": "router = APIRouter()\nlogger = logging.getLogger(__name__)\ndef convert_job_to_response(job: Job) -> JobResponse:\n    \"\"\"Convert SQLAlchemy Job model to Pydantic JobResponse\"\"\"\n    try:\n        # Convert to dict and handle None values for list fields\n        job_dict = {\n            'id': job.id,\n            'title': job.title,\n            'company': job.company,",
        "detail": "app.api.routes.jobs",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.api.routes.jobs",
        "description": "app.api.routes.jobs",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef convert_job_to_response(job: Job) -> JobResponse:\n    \"\"\"Convert SQLAlchemy Job model to Pydantic JobResponse\"\"\"\n    try:\n        # Convert to dict and handle None values for list fields\n        job_dict = {\n            'id': job.id,\n            'title': job.title,\n            'company': job.company,\n            'company_url': job.company_url,",
        "detail": "app.api.routes.jobs",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.api.routes.stripe",
        "description": "app.api.routes.stripe",
        "peekOfCode": "router = APIRouter()\nlogger = logging.getLogger(__name__)\n# Stripe is initialized globally in app/__init__.py\n# Disable Stripe internal INFO logging\nstripe.log = logging.getLogger(\"stripe\")\nstripe.log.setLevel(logging.WARNING)\nstripe.log.addHandler(logging.StreamHandler())\n@router.post(\"/customer\", response_model=GetCustomerResponse)\nasync def get_or_create_customer(\n    request: GetCustomerRequest,",
        "detail": "app.api.routes.stripe",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.api.routes.stripe",
        "description": "app.api.routes.stripe",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Stripe is initialized globally in app/__init__.py\n# Disable Stripe internal INFO logging\nstripe.log = logging.getLogger(\"stripe\")\nstripe.log.setLevel(logging.WARNING)\nstripe.log.addHandler(logging.StreamHandler())\n@router.post(\"/customer\", response_model=GetCustomerResponse)\nasync def get_or_create_customer(\n    request: GetCustomerRequest,\n    user_id: str = Depends(get_user_id)",
        "detail": "app.api.routes.stripe",
        "documentation": {}
    },
    {
        "label": "stripe.log",
        "kind": 5,
        "importPath": "app.api.routes.stripe",
        "description": "app.api.routes.stripe",
        "peekOfCode": "stripe.log = logging.getLogger(\"stripe\")\nstripe.log.setLevel(logging.WARNING)\nstripe.log.addHandler(logging.StreamHandler())\n@router.post(\"/customer\", response_model=GetCustomerResponse)\nasync def get_or_create_customer(\n    request: GetCustomerRequest,\n    user_id: str = Depends(get_user_id)\n):\n    \"\"\"\n    Get or create a Stripe customer ID for a user.",
        "detail": "app.api.routes.stripe",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.api.routes.websocket",
        "description": "app.api.routes.websocket",
        "peekOfCode": "router = APIRouter()\n@router.websocket(\"/{user_id}\")\nasync def websocket_endpoint(websocket: WebSocket, user_id: str):\n    await websocket.accept()\n    pubsub = redis_client.pubsub()\n    await pubsub.subscribe(f\"user:{user_id}\")\n    try:\n        while True:\n            message = await pubsub.get_message(ignore_subscribe_messages=True)\n            if message:",
        "detail": "app.api.routes.websocket",
        "documentation": {}
    },
    {
        "label": "get_user_id",
        "kind": 2,
        "importPath": "app.api.dependencies",
        "description": "app.api.dependencies",
        "peekOfCode": "def get_user_id(request: Request) -> str:\n    \"\"\"Extract user_id from Firebase token\"\"\"\n    from firebase_admin import auth\n    import firebase_admin\n    from ..db.firestore import firestore_manager\n    # Get token from Authorization header\n    auth_header = request.headers.get(\"Authorization\")\n    if not auth_header:\n        raise HTTPException(status_code=401, detail=\"No authorization header\")\n    try:",
        "detail": "app.api.dependencies",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.api.dependencies",
        "description": "app.api.dependencies",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef get_user_id(request: Request) -> str:\n    \"\"\"Extract user_id from Firebase token\"\"\"\n    from firebase_admin import auth\n    import firebase_admin\n    from ..db.firestore import firestore_manager\n    # Get token from Authorization header\n    auth_header = request.headers.get(\"Authorization\")\n    if not auth_header:\n        raise HTTPException(status_code=401, detail=\"No authorization header\")",
        "detail": "app.api.dependencies",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "app.api.dependencies",
        "description": "app.api.dependencies",
        "peekOfCode": "__all__ = ['get_user_id']",
        "detail": "app.api.dependencies",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "app.core.config",
        "description": "app.core.config",
        "peekOfCode": "class Settings(BaseSettings):\n    \"\"\"\n    Application settings using pure Pydantic approach.\n    Environment variables are automatically loaded and validated.\n    \"\"\"\n    # Redis Configuration\n    REDIS_URL: str = Field(default=\"redis://localhost:6379/0\", description=\"Redis connection URL\")\n    # Firebase Configuration\n    FIREBASE_CREDENTIALS_PATH: str = Field(default=\"\", description=\"Path to Firebase service account JSON\")\n    FIREBASE_STORAGE_BUCKET: str = Field(default=\"\", description=\"Firebase Storage bucket name\")",
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "app.core.config",
        "description": "app.core.config",
        "peekOfCode": "settings = Settings()",
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "app.db.base",
        "description": "app.db.base",
        "peekOfCode": "def get_db():\n    \"\"\"Dependency to get database session\"\"\"\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.db.base",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.db.base",
        "description": "app.db.base",
        "peekOfCode": "engine = create_engine(\n    settings.DATABASE_URL,\n    pool_pre_ping=True,\n    pool_recycle=300,\n    echo=settings.DEBUG\n)\n# Create session factory\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n# Create base class for models\nBase = declarative_base()",
        "detail": "app.db.base",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "app.db.base",
        "description": "app.db.base",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n# Create base class for models\nBase = declarative_base()\ndef get_db():\n    \"\"\"Dependency to get database session\"\"\"\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.db.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "app.db.base",
        "description": "app.db.base",
        "peekOfCode": "Base = declarative_base()\ndef get_db():\n    \"\"\"Dependency to get database session\"\"\"\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.db.base",
        "documentation": {}
    },
    {
        "label": "FirestoreManager",
        "kind": 6,
        "importPath": "app.db.firestore",
        "description": "app.db.firestore",
        "peekOfCode": "class FirestoreManager:\n    \"\"\"Manages Firestore operations for user applications\"\"\"\n    def __init__(self):\n        self.db = None\n        self.app_name = self._get_app_name()\n        self._initialize_firestore()\n    def _get_app_name(self) -> str:\n        \"\"\"Generate a unique app name based on the process type\"\"\"\n        # Check if we're running in a Celery worker\n        if 'celery' in os.environ.get('_', '').lower() or 'worker' in os.environ.get('_', '').lower():",
        "detail": "app.db.firestore",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.db.firestore",
        "description": "app.db.firestore",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass FirestoreManager:\n    \"\"\"Manages Firestore operations for user applications\"\"\"\n    def __init__(self):\n        self.db = None\n        self.app_name = self._get_app_name()\n        self._initialize_firestore()\n    def _get_app_name(self) -> str:\n        \"\"\"Generate a unique app name based on the process type\"\"\"\n        # Check if we're running in a Celery worker",
        "detail": "app.db.firestore",
        "documentation": {}
    },
    {
        "label": "firestore_manager",
        "kind": 5,
        "importPath": "app.db.firestore",
        "description": "app.db.firestore",
        "peekOfCode": "firestore_manager = FirestoreManager()",
        "detail": "app.db.firestore",
        "documentation": {}
    },
    {
        "label": "Job",
        "kind": 6,
        "importPath": "app.db.models",
        "description": "app.db.models",
        "peekOfCode": "class Job(Base):\n    __tablename__ = \"jobs\"\n    id = Column(String, primary_key=True, index=True)\n    title = Column(String, nullable=False)\n    company = Column(String, nullable=False)\n    company_url = Column(String)\n    logo = Column(String)\n    location = Column(String)\n    salary_min_range = Column(Float)\n    salary_max_range = Column(Float)",
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "JobApplication",
        "kind": 6,
        "importPath": "app.db.models",
        "description": "app.db.models",
        "peekOfCode": "class JobApplication(Base):\n    __tablename__ = \"job_applications\"\n    id = Column(Integer, primary_key=True, index=True)\n    task_id = Column(String, unique=True, index=True, nullable=False)\n    job_url = Column(String, nullable=False)\n    company_name = Column(String)\n    job_title = Column(String)\n    status = Column(String, default=\"pending\")  # pending, processing, completed, failed\n    # Application data\n    resume_path = Column(String)",
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "ApplicationLog",
        "kind": 6,
        "importPath": "app.db.models",
        "description": "app.db.models",
        "peekOfCode": "class ApplicationLog(Base):\n    __tablename__ = \"application_logs\"\n    id = Column(Integer, primary_key=True, index=True)\n    application_id = Column(Integer, ForeignKey(\"job_applications.id\"))\n    level = Column(String)  # info, warning, error\n    message = Column(Text)\n    timestamp = Column(DateTime(timezone=True), server_default=func.now())\n    # Relationships\n    application = relationship(\"JobApplication\", back_populates=\"logs\")\nclass BrowserSession(Base):",
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "BrowserSession",
        "kind": 6,
        "importPath": "app.db.models",
        "description": "app.db.models",
        "peekOfCode": "class BrowserSession(Base):\n    __tablename__ = \"browser_sessions\"\n    id = Column(Integer, primary_key=True, index=True)\n    worker_id = Column(String, unique=True, index=True)\n    session_id = Column(String)\n    is_active = Column(Boolean, default=True)\n    last_used = Column(DateTime(timezone=True), server_default=func.now())\n    created_at = Column(DateTime(timezone=True), server_default=func.now())",
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "PostgresManager",
        "kind": 6,
        "importPath": "app.db.postgres",
        "description": "app.db.postgres",
        "peekOfCode": "class PostgresManager:\n    \"\"\"Manages PostgreSQL database operations\"\"\"\n    def __init__(self):\n        \"\"\"Initialize PostgreSQL connection with Secrets Manager authentication\"\"\"\n        logger.info(\"🐘 Starting PostgreSQL initialization...\")\n        try:\n            logger.info(\"📡 Connecting to PostgreSQL using Secrets Manager credentials\")\n            # Get database URL from Secrets Manager\n            db_url = get_db_url()\n            # Configure connection args",
        "detail": "app.db.postgres",
        "documentation": {}
    },
    {
        "label": "is_effectively_empty",
        "kind": 2,
        "importPath": "app.db.postgres",
        "description": "app.db.postgres",
        "peekOfCode": "def is_effectively_empty(val):\n    \"\"\"\n    Safely check if a value is null, empty, or effectively empty.\n    Args:\n        val: Value to check\n    Returns:\n        bool: True if the value is effectively empty, False otherwise\n    \"\"\"\n    if isinstance(val, (list, tuple, set, dict, np.ndarray, pd.Series)):\n        return len(val) == 0",
        "detail": "app.db.postgres",
        "documentation": {}
    },
    {
        "label": "get_db_credentials",
        "kind": 2,
        "importPath": "app.db.postgres",
        "description": "app.db.postgres",
        "peekOfCode": "def get_db_credentials():\n    \"\"\"Get database credentials from AWS Secrets Manager\"\"\"\n    try:\n        secrets_client = boto3.client(\n            'secretsmanager',\n            aws_access_key_id=settings.AWS_ACCESS_KEY_ID,\n            aws_secret_access_key=settings.AWS_SECRET_ACCESS_KEY,\n            region_name=settings.AWS_REGION\n        )\n        # Get the secret from Secrets Manager",
        "detail": "app.db.postgres",
        "documentation": {}
    },
    {
        "label": "get_db_url",
        "kind": 2,
        "importPath": "app.db.postgres",
        "description": "app.db.postgres",
        "peekOfCode": "def get_db_url():\n    \"\"\"Get database URL using credentials from Secrets Manager and settings\"\"\"\n    try:\n        credentials = get_db_credentials()\n        logger.info(\"Using Secrets Manager authentication for PostgreSQL\")\n        return URL.create(\n            drivername=\"postgresql\",\n            username=credentials['username'],\n            password=credentials['password'],\n            host=settings.POSTGRES_HOST,",
        "detail": "app.db.postgres",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "app.db.postgres",
        "description": "app.db.postgres",
        "peekOfCode": "def get_db():\n    \"\"\"FastAPI dependency to get database session\"\"\"\n    session = postgres_manager.SessionLocal()\n    try:\n        yield session\n    finally:\n        session.close()",
        "detail": "app.db.postgres",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.db.postgres",
        "description": "app.db.postgres",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef get_db_credentials():\n    \"\"\"Get database credentials from AWS Secrets Manager\"\"\"\n    try:\n        secrets_client = boto3.client(\n            'secretsmanager',\n            aws_access_key_id=settings.AWS_ACCESS_KEY_ID,\n            aws_secret_access_key=settings.AWS_SECRET_ACCESS_KEY,\n            region_name=settings.AWS_REGION\n        )",
        "detail": "app.db.postgres",
        "documentation": {}
    },
    {
        "label": "postgres_manager",
        "kind": 5,
        "importPath": "app.db.postgres",
        "description": "app.db.postgres",
        "peekOfCode": "postgres_manager = PostgresManager()\ndef get_db():\n    \"\"\"FastAPI dependency to get database session\"\"\"\n    session = postgres_manager.SessionLocal()\n    try:\n        yield session\n    finally:\n        session.close()",
        "detail": "app.db.postgres",
        "documentation": {}
    },
    {
        "label": "ApplicationStatus",
        "kind": 6,
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "peekOfCode": "class ApplicationStatus(str, Enum):\n    \"\"\"Application status matching frontend TypeScript interface\"\"\"\n    PENDING = \"Pending\"    # Initial state when job is being processed\n    PROCESSING = \"Processing\"  # When job is actively being processed\n    DRAFT = \"Draft\"        # After processing, ready for user to review and submit\n    APPLIED = \"Applied\"\n    SAVED = \"Saved\"\n    REJECTED = \"Rejected\"\n    INTERVIEWING = \"Interviewing\"\n    EXPIRED = \"Expired\"",
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "JobType",
        "kind": 6,
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "peekOfCode": "class JobType(str, Enum):\n    FULL_TIME = \"fulltime\"\n    PART_TIME = \"temporary\"\n    CONTRACT = \"contract\"\n    INTERNSHIP = \"internship\"\nclass Education(BaseModel):\n    school: str\n    degree: str\n    fieldOfStudy: str\n    educationFrom: datetime",
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "Education",
        "kind": 6,
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "peekOfCode": "class Education(BaseModel):\n    school: str\n    degree: str\n    fieldOfStudy: str\n    educationFrom: datetime\n    educationTo: Optional[datetime]\n    educationGpa: Optional[float]\n    educationEndMonth: Optional[str]\n    educationEndYear: Optional[str]\n    educationStartMonth: Optional[str]",
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "Employment",
        "kind": 6,
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "peekOfCode": "class Employment(BaseModel):\n    company: str\n    position: str\n    employmentFrom: datetime\n    employmentTo: Optional[datetime]\n    employmentDescription: str\n    employmentLocation: str\nclass Project(BaseModel):\n    projectName: str\n    projectDescription: str",
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "Project",
        "kind": 6,
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "peekOfCode": "class Project(BaseModel):\n    projectName: str\n    projectDescription: str\n    projectLink: Optional[str]\nclass UserProfile(BaseModel):\n    # Personal Information\n    fullName: str\n    email: str\n    phoneNumber: Optional[str]\n    currentLocation: Optional[str]",
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "UserProfile",
        "kind": 6,
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "peekOfCode": "class UserProfile(BaseModel):\n    # Personal Information\n    fullName: str\n    email: str\n    phoneNumber: Optional[str]\n    currentLocation: Optional[str]\n    resume: Optional[str]\n    resumeFilename: Optional[str]\n    resumeAutofill: Optional[Dict[str, Any]]\n    coverLetterPath: Optional[str]",
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "QuestionType",
        "kind": 6,
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "peekOfCode": "class QuestionType(Enum):\n    \"\"\"Field types enum.\"\"\"\n    INPUT = \"text\"\n    NUMBER = \"number\"\n    TEXTAREA = \"textarea\"\n    SELECT = \"select\"\n    MULTISELECT = \"multiselect\"\n    DATE = \"date\"\n    FILE = \"file\"\n    CHECKBOX = \"checkbox\"",
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "FormSectionType",
        "kind": 6,
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "peekOfCode": "class FormSectionType(str, Enum):\n    PERSONAL = \"personal\"\n    EDUCATION = \"education\"\n    EXPERIENCE = \"experience\"\n    RESUME = \"resume\"\n    COVER_LETTER = \"cover_letter\"\n    ADDITIONAL = \"additional\"\n    DEMOGRAPHIC = \"demographic\"\nAnswerType = Union[str, int, List[int], List[str]]\nclass FormQuestion(BaseModel):",
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "FormQuestion",
        "kind": 6,
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "peekOfCode": "class FormQuestion(BaseModel):\n    \"\"\"Form question model matching frontend interface\"\"\"\n    unique_label_id: str\n    question: str\n    answer: Optional[AnswerType] = None\n    type: QuestionType\n    placeholder: Optional[str] = None\n    options: Optional[List[str]] = None\n    section: FormSectionType\n    file_path: Optional[str] = None",
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "TaskStatusResponse",
        "kind": 6,
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "peekOfCode": "class TaskStatusResponse(BaseModel):\n    status: ApplicationStatus\n    result: Optional[Dict[str, Any]] = None\n    error: Optional[str] = None\nclass PrepareJobRequest(BaseModel):\n    \"\"\"Request model for preparing a job application\"\"\"\n    job_id: str\nclass ApplyJobRequest(BaseModel):\n    \"\"\"Request model for job application submission\"\"\"\n    application_id: str",
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "PrepareJobRequest",
        "kind": 6,
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "peekOfCode": "class PrepareJobRequest(BaseModel):\n    \"\"\"Request model for preparing a job application\"\"\"\n    job_id: str\nclass ApplyJobRequest(BaseModel):\n    \"\"\"Request model for job application submission\"\"\"\n    application_id: str\nclass ApplyJobResponse(BaseModel):\n    \"\"\"Response model for job application submission\"\"\"\n    application_id: str\n    status: ApplicationStatus",
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "ApplyJobRequest",
        "kind": 6,
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "peekOfCode": "class ApplyJobRequest(BaseModel):\n    \"\"\"Request model for job application submission\"\"\"\n    application_id: str\nclass ApplyJobResponse(BaseModel):\n    \"\"\"Response model for job application submission\"\"\"\n    application_id: str\n    status: ApplicationStatus\n    message: str\nclass SaveFormRequest(BaseModel):\n    \"\"\"Request model for saving form questions\"\"\"",
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "ApplyJobResponse",
        "kind": 6,
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "peekOfCode": "class ApplyJobResponse(BaseModel):\n    \"\"\"Response model for job application submission\"\"\"\n    application_id: str\n    status: ApplicationStatus\n    message: str\nclass SaveFormRequest(BaseModel):\n    \"\"\"Request model for saving form questions\"\"\"\n    application_id: str\n    form_questions: List[FormQuestion]\nclass SaveFormResponse(BaseModel):",
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "SaveFormRequest",
        "kind": 6,
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "peekOfCode": "class SaveFormRequest(BaseModel):\n    \"\"\"Request model for saving form questions\"\"\"\n    application_id: str\n    form_questions: List[FormQuestion]\nclass SaveFormResponse(BaseModel):\n    \"\"\"Response model for saving form questions\"\"\"\n    application_id: str\n    status: ApplicationStatus\n    message: str\nclass GenerateCoverLetterRequest(BaseModel):",
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "SaveFormResponse",
        "kind": 6,
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "peekOfCode": "class SaveFormResponse(BaseModel):\n    \"\"\"Response model for saving form questions\"\"\"\n    application_id: str\n    status: ApplicationStatus\n    message: str\nclass GenerateCoverLetterRequest(BaseModel):\n    \"\"\"Request model for generating cover letter\"\"\"\n    job_id: str\n    prompt: Optional[str] = None\nclass GenerateCoverLetterResponse(BaseModel):",
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "GenerateCoverLetterRequest",
        "kind": 6,
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "peekOfCode": "class GenerateCoverLetterRequest(BaseModel):\n    \"\"\"Request model for generating cover letter\"\"\"\n    job_id: str\n    prompt: Optional[str] = None\nclass GenerateCoverLetterResponse(BaseModel):\n    \"\"\"Response model for cover letter generation\"\"\"\n    application_id: str\n    cover_letter_path: str\n    message: str\nclass GenerateCustomAnswerRequest(BaseModel):",
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "GenerateCoverLetterResponse",
        "kind": 6,
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "peekOfCode": "class GenerateCoverLetterResponse(BaseModel):\n    \"\"\"Response model for cover letter generation\"\"\"\n    application_id: str\n    cover_letter_path: str\n    message: str\nclass GenerateCustomAnswerRequest(BaseModel):\n    \"\"\"Request model for generating custom answers\"\"\"\n    job_description: str\n    question: str\n    prompt: Optional[str] = None",
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "GenerateCustomAnswerRequest",
        "kind": 6,
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "peekOfCode": "class GenerateCustomAnswerRequest(BaseModel):\n    \"\"\"Request model for generating custom answers\"\"\"\n    job_description: str\n    question: str\n    prompt: Optional[str] = None\nclass GenerateCustomAnswerResponse(BaseModel):\n    \"\"\"Response model for custom answer generation\"\"\"\n    answer: str\n    message: str",
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "GenerateCustomAnswerResponse",
        "kind": 6,
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "peekOfCode": "class GenerateCustomAnswerResponse(BaseModel):\n    \"\"\"Response model for custom answer generation\"\"\"\n    answer: str\n    message: str",
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "AnswerType",
        "kind": 5,
        "importPath": "app.schemas.application",
        "description": "app.schemas.application",
        "peekOfCode": "AnswerType = Union[str, int, List[int], List[str]]\nclass FormQuestion(BaseModel):\n    \"\"\"Form question model matching frontend interface\"\"\"\n    unique_label_id: str\n    question: str\n    answer: Optional[AnswerType] = None\n    type: QuestionType\n    placeholder: Optional[str] = None\n    options: Optional[List[str]] = None\n    section: FormSectionType",
        "detail": "app.schemas.application",
        "documentation": {}
    },
    {
        "label": "JobBase",
        "kind": 6,
        "importPath": "app.schemas.job",
        "description": "app.schemas.job",
        "peekOfCode": "class JobBase(BaseModel):\n    \"\"\"Base Job model with common attributes\"\"\"\n    title: str = Field(..., min_length=1, max_length=255)\n    company: str = Field(..., min_length=1, max_length=255)\n    company_url: Optional[HttpUrl] = None\n    logo: Optional[HttpUrl] = None\n    company_description: Optional[str] = None\n    location: Optional[str] = Field(None, min_length=1, max_length=255)\n    salary_min_range: Optional[float] = Field(None, gt=0)\n    salary_max_range: Optional[float] = Field(None, gt=0)",
        "detail": "app.schemas.job",
        "documentation": {}
    },
    {
        "label": "JobCreate",
        "kind": 6,
        "importPath": "app.schemas.job",
        "description": "app.schemas.job",
        "peekOfCode": "class JobCreate(BaseModel):\n    id: str\n    title: str\n    company: str\n    company_url: Optional[str] = None\n    logo: Optional[str] = None\n    location: Optional[str] = None\n    salary_min_range: Optional[float] = None\n    salary_max_range: Optional[float] = None\n    salary_currency: Optional[str] = None",
        "detail": "app.schemas.job",
        "documentation": {}
    },
    {
        "label": "JobInDB",
        "kind": 6,
        "importPath": "app.schemas.job",
        "description": "app.schemas.job",
        "peekOfCode": "class JobInDB(JobBase):\n    \"\"\"Schema for job as stored in database\"\"\"\n    id: str\n    created_at: datetime\n    updated_at: datetime\n    model_config = {\"from_attributes\": True}\nclass JobResponse(JobInDB):\n    \"\"\"Schema for job response\"\"\"\n    pass  # Same as JobInDB for now, but can be extended if needed\nclass JobFilters(BaseModel):",
        "detail": "app.schemas.job",
        "documentation": {}
    },
    {
        "label": "JobResponse",
        "kind": 6,
        "importPath": "app.schemas.job",
        "description": "app.schemas.job",
        "peekOfCode": "class JobResponse(JobInDB):\n    \"\"\"Schema for job response\"\"\"\n    pass  # Same as JobInDB for now, but can be extended if needed\nclass JobFilters(BaseModel):\n    \"\"\"Schema for job filtering parameters\"\"\"\n    location: Optional[str] = None\n    job_type: Optional[str] = None\n    experience_level: Optional[str] = None\n    salary_min: Optional[float] = None\n    salary_max: Optional[float] = None",
        "detail": "app.schemas.job",
        "documentation": {}
    },
    {
        "label": "JobFilters",
        "kind": 6,
        "importPath": "app.schemas.job",
        "description": "app.schemas.job",
        "peekOfCode": "class JobFilters(BaseModel):\n    \"\"\"Schema for job filtering parameters\"\"\"\n    location: Optional[str] = None\n    job_type: Optional[str] = None\n    experience_level: Optional[str] = None\n    salary_min: Optional[float] = None\n    salary_max: Optional[float] = None\n    company: Optional[str] = None\n    title: Optional[str] = None\n    provides_sponsorship: Optional[bool] = None",
        "detail": "app.schemas.job",
        "documentation": {}
    },
    {
        "label": "JobsPaginatedResponse",
        "kind": 6,
        "importPath": "app.schemas.job",
        "description": "app.schemas.job",
        "peekOfCode": "class JobsPaginatedResponse(BaseModel):\n    \"\"\"Schema for paginated jobs response\"\"\"\n    jobs: List[JobResponse]\n    has_more: bool\n    last_job_id: Optional[str] = None\n    total_count: int\n    filtered_count: int\nclass JobsCountResponse(BaseModel):\n    \"\"\"Schema for jobs count response\"\"\"\n    filtered_count: int",
        "detail": "app.schemas.job",
        "documentation": {}
    },
    {
        "label": "JobsCountResponse",
        "kind": 6,
        "importPath": "app.schemas.job",
        "description": "app.schemas.job",
        "peekOfCode": "class JobsCountResponse(BaseModel):\n    \"\"\"Schema for jobs count response\"\"\"\n    filtered_count: int\n    total_available: int\nclass JobsSearchResponse(BaseModel):\n    \"\"\"Schema for advanced job search response\"\"\"\n    jobs: List[JobResponse]\n    total_count: int\n    limit: int\n    offset: int",
        "detail": "app.schemas.job",
        "documentation": {}
    },
    {
        "label": "JobsSearchResponse",
        "kind": 6,
        "importPath": "app.schemas.job",
        "description": "app.schemas.job",
        "peekOfCode": "class JobsSearchResponse(BaseModel):\n    \"\"\"Schema for advanced job search response\"\"\"\n    jobs: List[JobResponse]\n    total_count: int\n    limit: int\n    offset: int\n    has_more: bool\nclass JobsResponse(BaseModel):\n    jobs: List[JobResponse]\n    total: int",
        "detail": "app.schemas.job",
        "documentation": {}
    },
    {
        "label": "JobsResponse",
        "kind": 6,
        "importPath": "app.schemas.job",
        "description": "app.schemas.job",
        "peekOfCode": "class JobsResponse(BaseModel):\n    jobs: List[JobResponse]\n    total: int\n    lastJobId: Optional[str] = None\n# Example of how to use the schema:\n\"\"\"\n# Creating a new job\nnew_job = JobCreate(\n    title=\"Senior Software Engineer\",\n    company=\"TechCorp Innovation\",",
        "detail": "app.schemas.job",
        "documentation": {}
    },
    {
        "label": "new_job",
        "kind": 5,
        "importPath": "app.schemas.job",
        "description": "app.schemas.job",
        "peekOfCode": "new_job = JobCreate(\n    title=\"Senior Software Engineer\",\n    company=\"TechCorp Innovation\",\n    logo=\"https://example.com/techcorp-logo.png\",\n    location=\"San Francisco, CA (Hybrid)\",\n    salary=\"$150,000 - $220,000 annually\",\n    salary_value=185000.00,\n    job_type=\"Full-time\",\n    description=\"TechCorp Innovation is seeking a Senior Software Engineer...\",\n    experience_level=\"Senior\",",
        "detail": "app.schemas.job",
        "documentation": {}
    },
    {
        "label": "GetCustomerRequest",
        "kind": 6,
        "importPath": "app.schemas.stripe",
        "description": "app.schemas.stripe",
        "peekOfCode": "class GetCustomerRequest(BaseModel):\n    \"\"\"Request model for getting/creating a Stripe customer\"\"\"\n    email: Optional[str] = None\nclass GetCustomerResponse(BaseModel):\n    \"\"\"Response model for Stripe customer operations\"\"\"\n    customer_id: str\n    created: bool = False  # True if customer was newly created, False if existing\n    message: str\nclass CancelSubscriptionRequest(BaseModel):\n    \"\"\"Request model for canceling a subscription\"\"\"",
        "detail": "app.schemas.stripe",
        "documentation": {}
    },
    {
        "label": "GetCustomerResponse",
        "kind": 6,
        "importPath": "app.schemas.stripe",
        "description": "app.schemas.stripe",
        "peekOfCode": "class GetCustomerResponse(BaseModel):\n    \"\"\"Response model for Stripe customer operations\"\"\"\n    customer_id: str\n    created: bool = False  # True if customer was newly created, False if existing\n    message: str\nclass CancelSubscriptionRequest(BaseModel):\n    \"\"\"Request model for canceling a subscription\"\"\"\n    user_id: str\nclass CancelSubscriptionResponse(BaseModel):\n    \"\"\"Response model for subscription cancellation\"\"\"",
        "detail": "app.schemas.stripe",
        "documentation": {}
    },
    {
        "label": "CancelSubscriptionRequest",
        "kind": 6,
        "importPath": "app.schemas.stripe",
        "description": "app.schemas.stripe",
        "peekOfCode": "class CancelSubscriptionRequest(BaseModel):\n    \"\"\"Request model for canceling a subscription\"\"\"\n    user_id: str\nclass CancelSubscriptionResponse(BaseModel):\n    \"\"\"Response model for subscription cancellation\"\"\"\n    subscription_id: str\n    status: str\n    canceled_at: str\n    message: str\nclass UpdateSubscriptionRequest(BaseModel):",
        "detail": "app.schemas.stripe",
        "documentation": {}
    },
    {
        "label": "CancelSubscriptionResponse",
        "kind": 6,
        "importPath": "app.schemas.stripe",
        "description": "app.schemas.stripe",
        "peekOfCode": "class CancelSubscriptionResponse(BaseModel):\n    \"\"\"Response model for subscription cancellation\"\"\"\n    subscription_id: str\n    status: str\n    canceled_at: str\n    message: str\nclass UpdateSubscriptionRequest(BaseModel):\n    \"\"\"Request model for updating a subscription\"\"\"\n    user_id: str\n    new_price_id: Optional[str] = None",
        "detail": "app.schemas.stripe",
        "documentation": {}
    },
    {
        "label": "UpdateSubscriptionRequest",
        "kind": 6,
        "importPath": "app.schemas.stripe",
        "description": "app.schemas.stripe",
        "peekOfCode": "class UpdateSubscriptionRequest(BaseModel):\n    \"\"\"Request model for updating a subscription\"\"\"\n    user_id: str\n    new_price_id: Optional[str] = None\n    quantity: Optional[int] = None\n    proration_behavior: Optional[str] = \"none\"  # create_prorations, none, always_invoice\nclass UpdateSubscriptionResponse(BaseModel):\n    \"\"\"Response model for subscription updates\"\"\"\n    subscription_id: str\n    status: str",
        "detail": "app.schemas.stripe",
        "documentation": {}
    },
    {
        "label": "UpdateSubscriptionResponse",
        "kind": 6,
        "importPath": "app.schemas.stripe",
        "description": "app.schemas.stripe",
        "peekOfCode": "class UpdateSubscriptionResponse(BaseModel):\n    \"\"\"Response model for subscription updates\"\"\"\n    subscription_id: str\n    status: str\n    message: str\nclass GetSubscriptionInfoRequest(BaseModel):\n    \"\"\"Request model for getting subscription info\"\"\"\n    user_id: str\nclass PendingUpdate(BaseModel):\n    \"\"\"Model for pending subscription updates\"\"\"",
        "detail": "app.schemas.stripe",
        "documentation": {}
    },
    {
        "label": "GetSubscriptionInfoRequest",
        "kind": 6,
        "importPath": "app.schemas.stripe",
        "description": "app.schemas.stripe",
        "peekOfCode": "class GetSubscriptionInfoRequest(BaseModel):\n    \"\"\"Request model for getting subscription info\"\"\"\n    user_id: str\nclass PendingUpdate(BaseModel):\n    \"\"\"Model for pending subscription updates\"\"\"\n    new_plan_name: Optional[str] = None\n    new_price: Optional[float] = None\n    effective_date: str  # Format: MM/DD/YYYY\n    currency: str\nclass GetSubscriptionInfoResponse(BaseModel):",
        "detail": "app.schemas.stripe",
        "documentation": {}
    },
    {
        "label": "PendingUpdate",
        "kind": 6,
        "importPath": "app.schemas.stripe",
        "description": "app.schemas.stripe",
        "peekOfCode": "class PendingUpdate(BaseModel):\n    \"\"\"Model for pending subscription updates\"\"\"\n    new_plan_name: Optional[str] = None\n    new_price: Optional[float] = None\n    effective_date: str  # Format: MM/DD/YYYY\n    currency: str\nclass GetSubscriptionInfoResponse(BaseModel):\n    \"\"\"Response model for subscription info\"\"\"\n    subscription_id: str\n    status: str",
        "detail": "app.schemas.stripe",
        "documentation": {}
    },
    {
        "label": "GetSubscriptionInfoResponse",
        "kind": 6,
        "importPath": "app.schemas.stripe",
        "description": "app.schemas.stripe",
        "peekOfCode": "class GetSubscriptionInfoResponse(BaseModel):\n    \"\"\"Response model for subscription info\"\"\"\n    subscription_id: str\n    status: str\n    renewal_date: str  # Format: MM/DD/YYYY\n    price: float\n    currency: str\n    plan_name: Optional[str] = None\n    cancel_at_period_end: bool\n    has_pending_update: bool = False",
        "detail": "app.schemas.stripe",
        "documentation": {}
    },
    {
        "label": "WebhookResponse",
        "kind": 6,
        "importPath": "app.schemas.stripe",
        "description": "app.schemas.stripe",
        "peekOfCode": "class WebhookResponse(BaseModel):\n    \"\"\"Response model for webhook processing\"\"\"\n    received: bool\n    event_type: str\n    processed: bool\n    message: str\nclass GetSessionInfoRequest(BaseModel):\n    \"\"\"Request model for getting session info\"\"\"\n    session_id: str\nclass GetSessionInfoResponse(BaseModel):",
        "detail": "app.schemas.stripe",
        "documentation": {}
    },
    {
        "label": "GetSessionInfoRequest",
        "kind": 6,
        "importPath": "app.schemas.stripe",
        "description": "app.schemas.stripe",
        "peekOfCode": "class GetSessionInfoRequest(BaseModel):\n    \"\"\"Request model for getting session info\"\"\"\n    session_id: str\nclass GetSessionInfoResponse(BaseModel):\n    \"\"\"Response model for session info\"\"\"\n    session_id: str\n    payment_status: str\n    is_paid: bool\n    message: str\nclass DeleteCustomerRequest(BaseModel):",
        "detail": "app.schemas.stripe",
        "documentation": {}
    },
    {
        "label": "GetSessionInfoResponse",
        "kind": 6,
        "importPath": "app.schemas.stripe",
        "description": "app.schemas.stripe",
        "peekOfCode": "class GetSessionInfoResponse(BaseModel):\n    \"\"\"Response model for session info\"\"\"\n    session_id: str\n    payment_status: str\n    is_paid: bool\n    message: str\nclass DeleteCustomerRequest(BaseModel):\n    \"\"\"Request model for deleting a customer\"\"\"\n    user_id: str\nclass DeleteCustomerResponse(BaseModel):",
        "detail": "app.schemas.stripe",
        "documentation": {}
    },
    {
        "label": "DeleteCustomerRequest",
        "kind": 6,
        "importPath": "app.schemas.stripe",
        "description": "app.schemas.stripe",
        "peekOfCode": "class DeleteCustomerRequest(BaseModel):\n    \"\"\"Request model for deleting a customer\"\"\"\n    user_id: str\nclass DeleteCustomerResponse(BaseModel):\n    \"\"\"Response model for customer deletion\"\"\"\n    user_id: str\n    stripe_deleted: bool\n    firestore_deleted: bool\n    message: str\nclass RenewSubscriptionRequest(BaseModel):",
        "detail": "app.schemas.stripe",
        "documentation": {}
    },
    {
        "label": "DeleteCustomerResponse",
        "kind": 6,
        "importPath": "app.schemas.stripe",
        "description": "app.schemas.stripe",
        "peekOfCode": "class DeleteCustomerResponse(BaseModel):\n    \"\"\"Response model for customer deletion\"\"\"\n    user_id: str\n    stripe_deleted: bool\n    firestore_deleted: bool\n    message: str\nclass RenewSubscriptionRequest(BaseModel):\n    \"\"\"Request model for renewing a subscription\"\"\"\n    user_id: str\nclass RenewSubscriptionResponse(BaseModel):",
        "detail": "app.schemas.stripe",
        "documentation": {}
    },
    {
        "label": "RenewSubscriptionRequest",
        "kind": 6,
        "importPath": "app.schemas.stripe",
        "description": "app.schemas.stripe",
        "peekOfCode": "class RenewSubscriptionRequest(BaseModel):\n    \"\"\"Request model for renewing a subscription\"\"\"\n    user_id: str\nclass RenewSubscriptionResponse(BaseModel):\n    \"\"\"Response model for subscription renewal\"\"\"\n    subscription_id: str\n    status: str\n    current_period_end: str\n    message: str",
        "detail": "app.schemas.stripe",
        "documentation": {}
    },
    {
        "label": "RenewSubscriptionResponse",
        "kind": 6,
        "importPath": "app.schemas.stripe",
        "description": "app.schemas.stripe",
        "peekOfCode": "class RenewSubscriptionResponse(BaseModel):\n    \"\"\"Response model for subscription renewal\"\"\"\n    subscription_id: str\n    status: str\n    current_period_end: str\n    message: str",
        "detail": "app.schemas.stripe",
        "documentation": {}
    },
    {
        "label": "JobFetcher",
        "kind": 6,
        "importPath": "app.services.fetch_jobs.main",
        "description": "app.services.fetch_jobs.main",
        "peekOfCode": "class JobFetcher:\n    \"\"\"\n    A class to fetch jobs from multiple job sites using jobspy library.\n    Supports Linkedin for now.\n    \"\"\"\n    def __init__(self, \n                 results_wanted: int = 500,\n                 hours_old: int = 1,\n                 linkedin_fetch_description: bool = True,\n                 proxies: Optional[List[str]] = None):",
        "detail": "app.services.fetch_jobs.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "app.services.fetch_jobs.main",
        "description": "app.services.fetch_jobs.main",
        "peekOfCode": "def main():\n    \"\"\"\n    Fetch jobs for all specializations in United States and Canada and upload them to the database.\n    \"\"\"\n    print(\"🚀 Starting job fetching for all specializations in US and Canada...\")\n    # Initialize JobFetcher with AI assistant\n    job_fetcher = JobFetcher(hours_old=24)\n    # Get all specializations from the mapping\n    all_specializations = list(INDUSTRY_SPECIALIZATION_MAPPING.keys())\n    # Create searches for all specializations in US and Canada",
        "detail": "app.services.fetch_jobs.main",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.services.fetch_jobs.main",
        "description": "app.services.fetch_jobs.main",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass JobFetcher:\n    \"\"\"\n    A class to fetch jobs from multiple job sites using jobspy library.\n    Supports Linkedin for now.\n    \"\"\"\n    def __init__(self, \n                 results_wanted: int = 500,\n                 hours_old: int = 1,\n                 linkedin_fetch_description: bool = True,",
        "detail": "app.services.fetch_jobs.main",
        "documentation": {}
    },
    {
        "label": "Ashby",
        "kind": 6,
        "importPath": "app.services.job_application.portals.ashby",
        "description": "app.services.job_application.portals.ashby",
        "peekOfCode": "class Ashby(BasePortal):\n    \"\"\"Ashby job portal handler.\"\"\"\n    def __init__(self, driver, profile, url=None, job_description=None, overrided_answers=None):\n        \"\"\"Initialize Ashby portal with driver and user profile.\"\"\"\n        super().__init__(driver, profile, url, job_description, overrided_answers)\n        self.logger.info(\"Ashby portal initialized successfully\")\n    def apply(self):\n        \"\"\"Apply to job on Ashby portal using base class functionality.\"\"\"\n        try:\n            self.logger.info(\"Starting to fill out Ashby application form\")",
        "detail": "app.services.job_application.portals.ashby",
        "documentation": {}
    },
    {
        "label": "BasePortal",
        "kind": 6,
        "importPath": "app.services.job_application.portals.base",
        "description": "app.services.job_application.portals.base",
        "peekOfCode": "class BasePortal(ABC):\n    \"\"\"Base class for all job application portals.\"\"\"\n    def __init__(self, driver: CustomWebDriver, profile: dict, url: str = None, job_description: str = None, overrided_answers: dict = None):\n        \"\"\"Initialize portal with driver and user profile.\"\"\"\n        self.driver = driver\n        self.profile = profile\n        self.url = url\n        self.job_description = job_description\n        self.overrided_answers = overrided_answers\n        self.logger = logging.getLogger(self.__class__.__name__)",
        "detail": "app.services.job_application.portals.base",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.services.job_application.portals.base",
        "description": "app.services.job_application.portals.base",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass BasePortal(ABC):\n    \"\"\"Base class for all job application portals.\"\"\"\n    def __init__(self, driver: CustomWebDriver, profile: dict, url: str = None, job_description: str = None, overrided_answers: dict = None):\n        \"\"\"Initialize portal with driver and user profile.\"\"\"\n        self.driver = driver\n        self.profile = profile\n        self.url = url\n        self.job_description = job_description\n        self.overrided_answers = overrided_answers",
        "detail": "app.services.job_application.portals.base",
        "documentation": {}
    },
    {
        "label": "Greenhouse",
        "kind": 6,
        "importPath": "app.services.job_application.portals.greenhouse",
        "description": "app.services.job_application.portals.greenhouse",
        "peekOfCode": "class Greenhouse(BasePortal):\n    \"\"\"Greenhouse job portal handler.\"\"\"\n    def __init__(self, driver, profile, url=None, job_description=None, overrided_answers=None):\n        \"\"\"Initialize Greenhouse portal with driver and user profile.\"\"\"\n        super().__init__(driver, profile, url, job_description, overrided_answers)\n        self.is_new_portal = self.url and 'job-boards.greenhouse.io' in self.url\n        self.logger.info(\"Greenhouse portal initialized successfully\")\n    def apply(self):\n        \"\"\"Apply to job on Greenhouse.\"\"\"\n        try:",
        "detail": "app.services.job_application.portals.greenhouse",
        "documentation": {}
    },
    {
        "label": "Jobvite",
        "kind": 6,
        "importPath": "app.services.job_application.portals.jobvite",
        "description": "app.services.job_application.portals.jobvite",
        "peekOfCode": "class Jobvite(BasePortal):\n    \"\"\"Jobvite job portal handler.\"\"\"\n    def __init__(self, driver, profile, url=None, job_description=None, overrided_answers=None):\n        \"\"\"Initialize Jobvite portal with driver and user profile.\"\"\"\n        super().__init__(driver, profile, url, job_description, overrided_answers)\n        self.logger.info(\"Jobvite portal initialized successfully\")\n    def apply(self):\n        \"\"\"Apply to job on Jobvite portal using base class functionality.\"\"\"\n        try:\n            self.logger.info(\"Starting to fill out Jobvite application form\")",
        "detail": "app.services.job_application.portals.jobvite",
        "documentation": {}
    },
    {
        "label": "Lever",
        "kind": 6,
        "importPath": "app.services.job_application.portals.lever",
        "description": "app.services.job_application.portals.lever",
        "peekOfCode": "class Lever(BasePortal):\n    \"\"\"Lever job portal handler.\"\"\"\n    def __init__(self, driver, profile, url=None, job_description=None, overrided_answers=None):\n        \"\"\"Initialize Lever portal with driver and user profile.\"\"\"\n        super().__init__(driver, profile, url, job_description, overrided_answers)\n        self.logger.info(\"Lever portal initialized successfully\")\n    def apply(self):\n        \"\"\"Apply to job on Lever portal using base class functionality.\"\"\"\n        try:\n            self.logger.info(\"Starting to fill out Lever application form\")",
        "detail": "app.services.job_application.portals.lever",
        "documentation": {}
    },
    {
        "label": "Workable",
        "kind": 6,
        "importPath": "app.services.job_application.portals.workable",
        "description": "app.services.job_application.portals.workable",
        "peekOfCode": "class Workable(BasePortal):\n    \"\"\"Workable job portal handler.\"\"\"\n    def __init__(self, driver, profile, url=None, job_description=None, overrided_answers=None):\n        \"\"\"Initialize Workable portal with explicit parent initialization.\"\"\"\n        try:\n            super().__init__(driver, profile, url, job_description, overrided_answers)\n            self.logger.info(\"Workable portal initialized successfully\")\n        except Exception as e:\n            self.logger.error(f\"Error initializing Workable portal: {str(e)}\")\n            raise",
        "detail": "app.services.job_application.portals.workable",
        "documentation": {}
    },
    {
        "label": "AutofillException",
        "kind": 6,
        "importPath": "app.services.job_application.utils.error",
        "description": "app.services.job_application.utils.error",
        "peekOfCode": "class AutofillException(Exception):\n    \"\"\"Exception raised when autofilling fails.\"\"\"\n    def __init__(self, error_type, message):\n        # Initialize the base class (Exception)\n        super().__init__(message)\n        # Store the error type (e.g., Listbox, Input, etc.)\n        self.error_type = error_type\n    def __str__(self):\n        # Customize the error message format to include the error type\n        return f\"{self.error_type} Error: {self.args[0]}\"",
        "detail": "app.services.job_application.utils.error",
        "documentation": {}
    },
    {
        "label": "ApplyException",
        "kind": 6,
        "importPath": "app.services.job_application.utils.error",
        "description": "app.services.job_application.utils.error",
        "peekOfCode": "class ApplyException(Exception):\n    \"\"\"Exception raised when applying fails.\"\"\"",
        "detail": "app.services.job_application.utils.error",
        "documentation": {}
    },
    {
        "label": "clean_string",
        "kind": 2,
        "importPath": "app.services.job_application.utils.helpers",
        "description": "app.services.job_application.utils.helpers",
        "peekOfCode": "def clean_string(s):\n    \"\"\"Clean a string by removing special characters and replacing hyphens and underscores with spaces.\"\"\"\n    s = s.replace(\"-\", \" \").replace(\"_\", \" \")\n    return re.sub(r'[^A-Za-z0-9 ]+', '', s)\ndef clean_label(s):\n    \"\"\"Clean a label by removing special characters and replacing hyphens and underscores with spaces.\"\"\"\n    # Keep important characters\n    s = s.replace(\"-\", \" \").replace(\"_\", \" \")\n    cleaned = re.sub(r\"[^A-Za-z0-9?!/.' ]+\", '', s)\n    # Strip extra spaces",
        "detail": "app.services.job_application.utils.helpers",
        "documentation": {}
    },
    {
        "label": "clean_label",
        "kind": 2,
        "importPath": "app.services.job_application.utils.helpers",
        "description": "app.services.job_application.utils.helpers",
        "peekOfCode": "def clean_label(s):\n    \"\"\"Clean a label by removing special characters and replacing hyphens and underscores with spaces.\"\"\"\n    # Keep important characters\n    s = s.replace(\"-\", \" \").replace(\"_\", \" \")\n    cleaned = re.sub(r\"[^A-Za-z0-9?!/.' ]+\", '', s)\n    # Strip extra spaces\n    cleaned = re.sub(r'\\s+', ' ', cleaned).strip()\n    # Capitalize if all lowercase\n    return cleaned.capitalize() if cleaned.islower() else cleaned",
        "detail": "app.services.job_application.utils.helpers",
        "documentation": {}
    },
    {
        "label": "take_screenshot",
        "kind": 2,
        "importPath": "app.services.job_application.utils.screenshot",
        "description": "app.services.job_application.utils.screenshot",
        "peekOfCode": "def take_screenshot(driver, application_id: str, portal_name: JobPortal, submit: bool = False) -> Optional[str]:\n    \"\"\"\n    Take a screenshot of the current page using CDP.\n    Args:\n        driver: Selenium WebDriver instance\n        application_id: Application identifier for filename\n        portal_name: JobPortal enum to determine portal-specific processing\n        submit: Boolean to determine if the screenshot is for a submitted application\n    Returns:\n        Filepath to the screenshot if successful, None otherwise",
        "detail": "app.services.job_application.utils.screenshot",
        "documentation": {}
    },
    {
        "label": "cleanup_screenshot",
        "kind": 2,
        "importPath": "app.services.job_application.utils.screenshot",
        "description": "app.services.job_application.utils.screenshot",
        "peekOfCode": "def cleanup_screenshot(filepath: str) -> bool:\n    \"\"\"\n    Clean up screenshot file from temporary directory.\n    Args:\n        filepath: Path to the screenshot file to delete\n    Returns:\n        True if cleanup was successful, False otherwise\n    \"\"\"\n    try:\n        if filepath and os.path.exists(filepath):",
        "detail": "app.services.job_application.utils.screenshot",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.services.job_application.utils.screenshot",
        "description": "app.services.job_application.utils.screenshot",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef take_screenshot(driver, application_id: str, portal_name: JobPortal, submit: bool = False) -> Optional[str]:\n    \"\"\"\n    Take a screenshot of the current page using CDP.\n    Args:\n        driver: Selenium WebDriver instance\n        application_id: Application identifier for filename\n        portal_name: JobPortal enum to determine portal-specific processing\n        submit: Boolean to determine if the screenshot is for a submitted application\n    Returns:",
        "detail": "app.services.job_application.utils.screenshot",
        "documentation": {}
    },
    {
        "label": "validate_and_convert_form_questions",
        "kind": 2,
        "importPath": "app.services.job_application.utils.validation",
        "description": "app.services.job_application.utils.validation",
        "peekOfCode": "def validate_and_convert_form_questions(form_questions: List[Dict[str, Any]]) -> List[Dict[str, Any]]:\n    \"\"\"\n    Validate and convert form question answers based on their type and pruned status.\n    Args:\n        form_questions: List containing form questions with their answers\n    Returns:\n        List with validated and converted form questions\n    \"\"\"\n    validated_questions = []\n    for question in form_questions:",
        "detail": "app.services.job_application.utils.validation",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.services.job_application.utils.validation",
        "description": "app.services.job_application.utils.validation",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef validate_and_convert_form_questions(form_questions: List[Dict[str, Any]]) -> List[Dict[str, Any]]:\n    \"\"\"\n    Validate and convert form question answers based on their type and pruned status.\n    Args:\n        form_questions: List containing form questions with their answers\n    Returns:\n        List with validated and converted form questions\n    \"\"\"\n    validated_questions = []",
        "detail": "app.services.job_application.utils.validation",
        "documentation": {}
    },
    {
        "label": "JobApplicationService",
        "kind": 6,
        "importPath": "app.services.job_application.main",
        "description": "app.services.job_application.main",
        "peekOfCode": "class JobApplicationService:\n    \"\"\"Service class for handling job applications across different portals.\"\"\"\n    def __init__(self, driver: CustomWebDriver, profile: dict = None, job_description: str = None):\n        \"\"\"Initialize the job application service with a driver and user profile.\"\"\"\n        self.driver = driver\n        self.profile = profile or {}\n        self.job_description = job_description\n        self.logger = logging.getLogger(__name__)\n        self.temp_file_paths = []\n        # Portal configuration - easily extensible",
        "detail": "app.services.job_application.main",
        "documentation": {}
    },
    {
        "label": "JobPortal",
        "kind": 6,
        "importPath": "app.services.job_application.types",
        "description": "app.services.job_application.types",
        "peekOfCode": "class JobPortal(Enum):\n    LEVER = 'Lever'\n    GREENHOUSE = 'Greenhouse'\n    OLD_GREENHOUSE = 'Old Greenhouse'\n    ASHBY = 'Ashby'\n    WORKABLE = 'Workable'\n# Supported job portals\nSUPPORTED_JOB_PORTALS = {\n    'lever.co': 'Lever',\n    'greenhouse.io': 'Greenhouse',",
        "detail": "app.services.job_application.types",
        "documentation": {}
    },
    {
        "label": "get_related_specializations",
        "kind": 2,
        "importPath": "app.services.job_application.types",
        "description": "app.services.job_application.types",
        "peekOfCode": "def get_related_specializations(specialization: str) -> List[str]:\n    \"\"\"Get related specializations for a given specialization.\"\"\"\n    return RELATED_SPECIALIZATIONS_MAP.get(specialization, [])\ndef expand_specializations(specializations: List[str]) -> List[str]:\n    \"\"\"Expand a list of specializations to include related ones.\"\"\"\n    expanded = set(specializations)  # Start with original specializations\n    for spec in specializations:\n        related = get_related_specializations(spec)\n        expanded.update(related)\n    return list(expanded)",
        "detail": "app.services.job_application.types",
        "documentation": {}
    },
    {
        "label": "expand_specializations",
        "kind": 2,
        "importPath": "app.services.job_application.types",
        "description": "app.services.job_application.types",
        "peekOfCode": "def expand_specializations(specializations: List[str]) -> List[str]:\n    \"\"\"Expand a list of specializations to include related ones.\"\"\"\n    expanded = set(specializations)  # Start with original specializations\n    for spec in specializations:\n        related = get_related_specializations(spec)\n        expanded.update(related)\n    return list(expanded)\ndef get_field_type(field_type_string: str, tag_name: str = None) -> QuestionType:\n    \"\"\"Convert string field type to QuestionType enum.\"\"\"\n    try:",
        "detail": "app.services.job_application.types",
        "documentation": {}
    },
    {
        "label": "get_field_type",
        "kind": 2,
        "importPath": "app.services.job_application.types",
        "description": "app.services.job_application.types",
        "peekOfCode": "def get_field_type(field_type_string: str, tag_name: str = None) -> QuestionType:\n    \"\"\"Convert string field type to QuestionType enum.\"\"\"\n    try:\n        if tag_name == 'textarea':\n            return QuestionType.TEXTAREA\n        elif tag_name == 'select' or tag_name == 'select-one':\n            return QuestionType.SELECT\n        return QuestionType(field_type_string.lower())\n    except ValueError:\n        return QuestionType.INPUT",
        "detail": "app.services.job_application.types",
        "documentation": {}
    },
    {
        "label": "map_profile_value",
        "kind": 2,
        "importPath": "app.services.job_application.types",
        "description": "app.services.job_application.types",
        "peekOfCode": "def map_profile_value(profile_key: str, profile_value) -> str:\n    \"\"\"Map profile values to their display labels using the type mappings.\"\"\"\n    if not profile_value:\n        return profile_value\n    # Handle list values (convert to comma-separated string of labels)\n    if isinstance(profile_value, list):\n        if profile_key == 'jobTypes':\n            return ', '.join([JOB_TYPE_MAPPING.get(val, val) for val in profile_value])\n        elif profile_key == 'locationPreferences':\n            return ', '.join([LOCATION_TYPE_MAPPING.get(val, val) for val in profile_value])",
        "detail": "app.services.job_application.types",
        "documentation": {}
    },
    {
        "label": "JOB_TYPE_OPTIONS",
        "kind": 5,
        "importPath": "app.services.job_application.types",
        "description": "app.services.job_application.types",
        "peekOfCode": "JOB_TYPE_OPTIONS = [\n    {'value': 'fulltime', 'label': 'Full-time'},\n    {'value': 'parttime', 'label': 'Part-time'},\n    {'value': 'temporary', 'label': 'Temporary'},\n    {'value': 'contract', 'label': 'Contract'},\n    {'value': 'internship', 'label': 'Internship'}\n]\n# Location Types\nLOCATION_TYPE_OPTIONS = [\n    # US Locations",
        "detail": "app.services.job_application.types",
        "documentation": {}
    },
    {
        "label": "LOCATION_TYPE_OPTIONS",
        "kind": 5,
        "importPath": "app.services.job_application.types",
        "description": "app.services.job_application.types",
        "peekOfCode": "LOCATION_TYPE_OPTIONS = [\n    # US Locations\n    {'value': 'new-york-ny', 'label': 'New York, NY'},\n    {'value': 'mountain-view-ca', 'label': 'Mountain View, CA'},\n    {'value': 'san-francisco-ca', 'label': 'San Francisco, CA'},\n    {'value': 'san-jose-ca', 'label': 'San Jose, CA'},\n    {'value': 'sunnyvale-ca', 'label': 'Sunnyvale, CA'},\n    {'value': 'san-mateo-ca', 'label': 'San Mateo, CA'},\n    {'value': 'redwood-city-ca', 'label': 'Redwood City, CA'},\n    {'value': 'palo-alto-ca', 'label': 'Palo Alto, CA'},",
        "detail": "app.services.job_application.types",
        "documentation": {}
    },
    {
        "label": "ROLE_LEVEL_OPTIONS",
        "kind": 5,
        "importPath": "app.services.job_application.types",
        "description": "app.services.job_application.types",
        "peekOfCode": "ROLE_LEVEL_OPTIONS = [\n    {'value': 'internship', 'label': 'Intern & Co-op'},\n    {'value': 'entry', 'label': 'Entry Level & New Grad'},\n    {'value': 'associate', 'label': 'Junior (1-3 years)'},\n    {'value': 'mid-senior', 'label': 'Senior (3-5 years)'},\n    {'value': 'director', 'label': 'Director & Lead'},\n    {'value': 'executive', 'label': 'Executive'}\n]\n# Industry Specializations\nINDUSTRY_SPECIALIZATION_OPTIONS = [",
        "detail": "app.services.job_application.types",
        "documentation": {}
    },
    {
        "label": "INDUSTRY_SPECIALIZATION_OPTIONS",
        "kind": 5,
        "importPath": "app.services.job_application.types",
        "description": "app.services.job_application.types",
        "peekOfCode": "INDUSTRY_SPECIALIZATION_OPTIONS = [\n    {'value': 'backend', 'label': 'Backend Engineer'},\n    {'value': 'frontend', 'label': 'Frontend Engineer'},\n    {'value': 'fullstack', 'label': 'Full Stack Engineer'},\n    {'value': 'mobile', 'label': 'Mobile Development'},\n    {'value': 'devops', 'label': 'DevOps & Infrastructure'},\n    {'value': 'data_science', 'label': 'Data Science'},\n    {'value': 'data_engineer', 'label': 'Data Engineer'},\n    {'value': 'ml_ai', 'label': 'Machine Learning & AI'},\n    {'value': 'product', 'label': 'Product Management'},",
        "detail": "app.services.job_application.types",
        "documentation": {}
    },
    {
        "label": "COMPANY_SIZE_OPTIONS",
        "kind": 5,
        "importPath": "app.services.job_application.types",
        "description": "app.services.job_application.types",
        "peekOfCode": "COMPANY_SIZE_OPTIONS = [\n    {'value': 'startup', 'label': 'Startup (1-50 employees)'},\n    {'value': 'small', 'label': 'Small (51-200 employees)'},\n    {'value': 'medium', 'label': 'Medium (201-1000 employees)'},\n    {'value': 'large', 'label': 'Large (1001-5000 employees)'},\n    {'value': 'enterprise', 'label': 'Enterprise (5000+ employees)'}\n]\n# Education Degrees\nDEGREE_OPTIONS = [\n    {'value': 'high_school', 'label': 'High School'},",
        "detail": "app.services.job_application.types",
        "documentation": {}
    },
    {
        "label": "DEGREE_OPTIONS",
        "kind": 5,
        "importPath": "app.services.job_application.types",
        "description": "app.services.job_application.types",
        "peekOfCode": "DEGREE_OPTIONS = [\n    {'value': 'high_school', 'label': 'High School'},\n    {'value': 'associate', 'label': 'Associate Degree'},\n    {'value': 'bachelor', 'label': \"Bachelor's Degree\"},\n    {'value': 'master', 'label': \"Master's Degree\"},\n    {'value': 'doctorate', 'label': 'Doctorate'},\n    {'value': 'other', 'label': 'Other'}\n]\n# Enum of job portals\nclass JobPortal(Enum):",
        "detail": "app.services.job_application.types",
        "documentation": {}
    },
    {
        "label": "SUPPORTED_JOB_PORTALS",
        "kind": 5,
        "importPath": "app.services.job_application.types",
        "description": "app.services.job_application.types",
        "peekOfCode": "SUPPORTED_JOB_PORTALS = {\n    'lever.co': 'Lever',\n    'greenhouse.io': 'Greenhouse',\n    'ashbyhq.com': 'Ashby',\n    'workable.com': 'Workable'\n}\nDEMOGRAPHIC_FIELDS = [\n    'gender',\n    'veteran',\n    'sexuality',",
        "detail": "app.services.job_application.types",
        "documentation": {}
    },
    {
        "label": "DEMOGRAPHIC_FIELDS",
        "kind": 5,
        "importPath": "app.services.job_application.types",
        "description": "app.services.job_application.types",
        "peekOfCode": "DEMOGRAPHIC_FIELDS = [\n    'gender',\n    'veteran',\n    'sexuality',\n    'race',\n    'hispanic',\n    'disability',\n    'trans'\n]\n# Create lookup dictionaries for easy value to label mapping",
        "detail": "app.services.job_application.types",
        "documentation": {}
    },
    {
        "label": "JOB_TYPE_MAPPING",
        "kind": 5,
        "importPath": "app.services.job_application.types",
        "description": "app.services.job_application.types",
        "peekOfCode": "JOB_TYPE_MAPPING = {option['value']: option['label'] for option in JOB_TYPE_OPTIONS}\nLOCATION_TYPE_MAPPING = {option['value']: option['label'] for option in LOCATION_TYPE_OPTIONS}\nROLE_LEVEL_MAPPING = {option['value']: option['label'] for option in ROLE_LEVEL_OPTIONS}\nINDUSTRY_SPECIALIZATION_MAPPING = {option['value']: option['label'] for option in INDUSTRY_SPECIALIZATION_OPTIONS}\nCOMPANY_SIZE_MAPPING = {option['value']: option['label'] for option in COMPANY_SIZE_OPTIONS}\nDEGREE_MAPPING = {option['value']: option['label'] for option in DEGREE_OPTIONS}\n# Related specializations map for expanding specialization filters\nRELATED_SPECIALIZATIONS_MAP = {\n    'frontend': ['fullstack', 'ux_ui'],\n    'backend': ['fullstack', 'devops', 'security'],",
        "detail": "app.services.job_application.types",
        "documentation": {}
    },
    {
        "label": "LOCATION_TYPE_MAPPING",
        "kind": 5,
        "importPath": "app.services.job_application.types",
        "description": "app.services.job_application.types",
        "peekOfCode": "LOCATION_TYPE_MAPPING = {option['value']: option['label'] for option in LOCATION_TYPE_OPTIONS}\nROLE_LEVEL_MAPPING = {option['value']: option['label'] for option in ROLE_LEVEL_OPTIONS}\nINDUSTRY_SPECIALIZATION_MAPPING = {option['value']: option['label'] for option in INDUSTRY_SPECIALIZATION_OPTIONS}\nCOMPANY_SIZE_MAPPING = {option['value']: option['label'] for option in COMPANY_SIZE_OPTIONS}\nDEGREE_MAPPING = {option['value']: option['label'] for option in DEGREE_OPTIONS}\n# Related specializations map for expanding specialization filters\nRELATED_SPECIALIZATIONS_MAP = {\n    'frontend': ['fullstack', 'ux_ui'],\n    'backend': ['fullstack', 'devops', 'security'],\n    'fullstack': ['frontend', 'backend'],",
        "detail": "app.services.job_application.types",
        "documentation": {}
    },
    {
        "label": "ROLE_LEVEL_MAPPING",
        "kind": 5,
        "importPath": "app.services.job_application.types",
        "description": "app.services.job_application.types",
        "peekOfCode": "ROLE_LEVEL_MAPPING = {option['value']: option['label'] for option in ROLE_LEVEL_OPTIONS}\nINDUSTRY_SPECIALIZATION_MAPPING = {option['value']: option['label'] for option in INDUSTRY_SPECIALIZATION_OPTIONS}\nCOMPANY_SIZE_MAPPING = {option['value']: option['label'] for option in COMPANY_SIZE_OPTIONS}\nDEGREE_MAPPING = {option['value']: option['label'] for option in DEGREE_OPTIONS}\n# Related specializations map for expanding specialization filters\nRELATED_SPECIALIZATIONS_MAP = {\n    'frontend': ['fullstack', 'ux_ui'],\n    'backend': ['fullstack', 'devops', 'security'],\n    'fullstack': ['frontend', 'backend'],\n    'mobile': ['frontend', 'game_dev', 'ar_vr'],",
        "detail": "app.services.job_application.types",
        "documentation": {}
    },
    {
        "label": "INDUSTRY_SPECIALIZATION_MAPPING",
        "kind": 5,
        "importPath": "app.services.job_application.types",
        "description": "app.services.job_application.types",
        "peekOfCode": "INDUSTRY_SPECIALIZATION_MAPPING = {option['value']: option['label'] for option in INDUSTRY_SPECIALIZATION_OPTIONS}\nCOMPANY_SIZE_MAPPING = {option['value']: option['label'] for option in COMPANY_SIZE_OPTIONS}\nDEGREE_MAPPING = {option['value']: option['label'] for option in DEGREE_OPTIONS}\n# Related specializations map for expanding specialization filters\nRELATED_SPECIALIZATIONS_MAP = {\n    'frontend': ['fullstack', 'ux_ui'],\n    'backend': ['fullstack', 'devops', 'security'],\n    'fullstack': ['frontend', 'backend'],\n    'mobile': ['frontend', 'game_dev', 'ar_vr'],\n    'devops': ['backend', 'cloud', 'security'],",
        "detail": "app.services.job_application.types",
        "documentation": {}
    },
    {
        "label": "COMPANY_SIZE_MAPPING",
        "kind": 5,
        "importPath": "app.services.job_application.types",
        "description": "app.services.job_application.types",
        "peekOfCode": "COMPANY_SIZE_MAPPING = {option['value']: option['label'] for option in COMPANY_SIZE_OPTIONS}\nDEGREE_MAPPING = {option['value']: option['label'] for option in DEGREE_OPTIONS}\n# Related specializations map for expanding specialization filters\nRELATED_SPECIALIZATIONS_MAP = {\n    'frontend': ['fullstack', 'ux_ui'],\n    'backend': ['fullstack', 'devops', 'security'],\n    'fullstack': ['frontend', 'backend'],\n    'mobile': ['frontend', 'game_dev', 'ar_vr'],\n    'devops': ['backend', 'cloud', 'security'],\n    'ml_ai': ['data_science', 'data_engineer'],",
        "detail": "app.services.job_application.types",
        "documentation": {}
    },
    {
        "label": "DEGREE_MAPPING",
        "kind": 5,
        "importPath": "app.services.job_application.types",
        "description": "app.services.job_application.types",
        "peekOfCode": "DEGREE_MAPPING = {option['value']: option['label'] for option in DEGREE_OPTIONS}\n# Related specializations map for expanding specialization filters\nRELATED_SPECIALIZATIONS_MAP = {\n    'frontend': ['fullstack', 'ux_ui'],\n    'backend': ['fullstack', 'devops', 'security'],\n    'fullstack': ['frontend', 'backend'],\n    'mobile': ['frontend', 'game_dev', 'ar_vr'],\n    'devops': ['backend', 'cloud', 'security'],\n    'ml_ai': ['data_science', 'data_engineer'],\n    'data_science': ['ml_ai', 'data_engineer'],",
        "detail": "app.services.job_application.types",
        "documentation": {}
    },
    {
        "label": "RELATED_SPECIALIZATIONS_MAP",
        "kind": 5,
        "importPath": "app.services.job_application.types",
        "description": "app.services.job_application.types",
        "peekOfCode": "RELATED_SPECIALIZATIONS_MAP = {\n    'frontend': ['fullstack', 'ux_ui'],\n    'backend': ['fullstack', 'devops', 'security'],\n    'fullstack': ['frontend', 'backend'],\n    'mobile': ['frontend', 'game_dev', 'ar_vr'],\n    'devops': ['backend', 'cloud', 'security'],\n    'ml_ai': ['data_science', 'data_engineer'],\n    'data_science': ['ml_ai', 'data_engineer'],\n    'ux_ui': ['frontend', 'product'],\n    'qa': ['backend'],",
        "detail": "app.services.job_application.types",
        "documentation": {}
    },
    {
        "label": "PDFGenerator",
        "kind": 6,
        "importPath": "app.services.pdf_generator.pdf_generator",
        "description": "app.services.pdf_generator.pdf_generator",
        "peekOfCode": "class PDFGenerator:\n    \"\"\"Service for generating PDF documents from text and other content\"\"\"\n    @staticmethod\n    def create_pdf_from_text(text: str, output_path: str, profile: dict) -> bool:\n        \"\"\"\n        Create a PDF cover letter with a modern header (name + contact icons) and styled text.\n        \"\"\"\n        try:\n            styles = getSampleStyleSheet()\n            normal_style = styles['Normal']",
        "detail": "app.services.pdf_generator.pdf_generator",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.services.pdf_generator.pdf_generator",
        "description": "app.services.pdf_generator.pdf_generator",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass PDFGenerator:\n    \"\"\"Service for generating PDF documents from text and other content\"\"\"\n    @staticmethod\n    def create_pdf_from_text(text: str, output_path: str, profile: dict) -> bool:\n        \"\"\"\n        Create a PDF cover letter with a modern header (name + contact icons) and styled text.\n        \"\"\"\n        try:\n            styles = getSampleStyleSheet()",
        "detail": "app.services.pdf_generator.pdf_generator",
        "documentation": {}
    },
    {
        "label": "pdf_generator",
        "kind": 5,
        "importPath": "app.services.pdf_generator.pdf_generator",
        "description": "app.services.pdf_generator.pdf_generator",
        "peekOfCode": "pdf_generator = PDFGenerator()",
        "detail": "app.services.pdf_generator.pdf_generator",
        "documentation": {}
    },
    {
        "label": "AIAssistant",
        "kind": 6,
        "importPath": "app.services.ai_assistant",
        "description": "app.services.ai_assistant",
        "peekOfCode": "class AIAssistant:\n    \"\"\"AI Assistant using OpenAI for Pro users (textarea only) and Gemini for non-pro users.\"\"\"\n    def __init__(self, user_profile: Dict[str, Any], job_description: Optional[str] = None, override_gemini_model: Optional[str] = None):\n        \"\"\"\n        Initialize the AI assistant with user profile.\n        Args:\n            user_profile: Dictionary containing user profile information\n            job_description: Optional job description to provide context for answers\n            override_gemini_model: Optional Gemini model to use instead of the default\n        \"\"\"",
        "detail": "app.services.ai_assistant",
        "documentation": {}
    },
    {
        "label": "CustomWebDriver",
        "kind": 6,
        "importPath": "app.services.browser",
        "description": "app.services.browser",
        "peekOfCode": "class CustomWebDriver(uc.Chrome):\n    \"\"\"Custom WebDriver class that extends the Undetected Chrome WebDriver with additional functionality.\"\"\"\n    def __init__(self, headless=None, options=None, service=None):\n        \"\"\"Initialize the Custom Undetected Chrome WebDriver with fallback\"\"\"\n        try:\n            if options is None:\n                options = self._get_custom_chrome_options(headless)\n            # Determine headless mode\n            if headless is None:\n                headless = settings.HEADLESS_BROWSER",
        "detail": "app.services.browser",
        "documentation": {}
    },
    {
        "label": "BrowserPool",
        "kind": 6,
        "importPath": "app.services.browser",
        "description": "app.services.browser",
        "peekOfCode": "class BrowserPool:\n    \"\"\"Singleton browser pool to manage persistent Chrome drivers\"\"\"\n    _instance = None\n    _lock = threading.Lock()\n    def __new__(cls):\n        if cls._instance is None:\n            with cls._lock:\n                if cls._instance is None:\n                    cls._instance = super().__new__(cls)\n                    cls._instance._initialized = False",
        "detail": "app.services.browser",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.services.browser",
        "description": "app.services.browser",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass CustomWebDriver(uc.Chrome):\n    \"\"\"Custom WebDriver class that extends the Undetected Chrome WebDriver with additional functionality.\"\"\"\n    def __init__(self, headless=None, options=None, service=None):\n        \"\"\"Initialize the Custom Undetected Chrome WebDriver with fallback\"\"\"\n        try:\n            if options is None:\n                options = self._get_custom_chrome_options(headless)\n            # Determine headless mode\n            if headless is None:",
        "detail": "app.services.browser",
        "documentation": {}
    },
    {
        "label": "browser_pool",
        "kind": 5,
        "importPath": "app.services.browser",
        "description": "app.services.browser",
        "peekOfCode": "browser_pool = BrowserPool()",
        "detail": "app.services.browser",
        "documentation": {}
    },
    {
        "label": "StorageManager",
        "kind": 6,
        "importPath": "app.services.storage",
        "description": "app.services.storage",
        "peekOfCode": "class StorageManager:\n    \"\"\"Manages file uploads to Firebase Storage\"\"\"\n    def __init__(self):\n        \"\"\"Initialize storage client\"\"\"\n        self.firebase_bucket = None\n        self._bucket_initialized = False\n        self.resume_path = \"resumes\"\n        self.cover_letter_path = \"cover-letters\"\n        self.screenshot_path = \"screenshots\"\n        self.submitted_screenshot_path = \"submitted-screenshots\"",
        "detail": "app.services.storage",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.services.storage",
        "description": "app.services.storage",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Check if Firebase Admin SDK is available\ntry:\n    from firebase_admin import storage\n    FIREBASE_AVAILABLE = True\nexcept ImportError:\n    FIREBASE_AVAILABLE = False\n    logger.warning(\"Firebase Admin SDK not available\")\nfrom app.core.config import settings\nclass StorageManager:",
        "detail": "app.services.storage",
        "documentation": {}
    },
    {
        "label": "storage_manager",
        "kind": 5,
        "importPath": "app.services.storage",
        "description": "app.services.storage",
        "peekOfCode": "storage_manager = StorageManager()",
        "detail": "app.services.storage",
        "documentation": {}
    },
    {
        "label": "check_able_to_submit",
        "kind": 2,
        "importPath": "app.services.websocket",
        "description": "app.services.websocket",
        "peekOfCode": "def check_able_to_submit(form_questions: Optional[List[FormQuestion]] = None) -> bool:\n    \"\"\"\n    Check if all required form questions have non-None answers\n    Args:\n        form_questions: List of form questions to check\n    Returns:\n        True if all required questions have answers, False otherwise\n    \"\"\"\n    if not form_questions:\n        return True  # If no questions, can submit",
        "detail": "app.services.websocket",
        "documentation": {}
    },
    {
        "label": "redis_client",
        "kind": 5,
        "importPath": "app.services.websocket",
        "description": "app.services.websocket",
        "peekOfCode": "redis_client = aioredis.from_url(settings.get_redis_url(db=1), decode_responses=True)\ndef check_able_to_submit(form_questions: Optional[List[FormQuestion]] = None) -> bool:\n    \"\"\"\n    Check if all required form questions have non-None answers\n    Args:\n        form_questions: List of form questions to check\n    Returns:\n        True if all required questions have answers, False otherwise\n    \"\"\"\n    if not form_questions:",
        "detail": "app.services.websocket",
        "documentation": {}
    },
    {
        "label": "celery_app",
        "kind": 5,
        "importPath": "app.tasks.celery_app",
        "description": "app.tasks.celery_app",
        "peekOfCode": "celery_app = Celery(\n    \"applywise\",\n    broker=settings.CELERY_BROKER_URL,\n    backend=settings.CELERY_RESULT_BACKEND,\n    include=[\"app.tasks.job_application\"]\n)\n# Configure Celery\ncelery_app.conf.update(\n    task_serializer=\"json\",\n    accept_content=[\"json\"],",
        "detail": "app.tasks.celery_app",
        "documentation": {}
    },
    {
        "label": "log_to_firestore",
        "kind": 2,
        "importPath": "app.tasks.job_application",
        "description": "app.tasks.job_application",
        "peekOfCode": "def log_to_firestore(user_id: str, application_id: str, level: str, message: str):\n    \"\"\"Helper function to log messages to Firestore\"\"\"\n    try:\n        firestore_manager.add_application_log(user_id, application_id, level, message)\n    except Exception as e:\n        logger.error(f\"Failed to log to Firestore: {e}\")\ndef _run_async_websocket(func, *args, **kwargs):\n    \"\"\"Run an async WebSocket function in a separate thread\"\"\"\n    try:\n        loop = asyncio.new_event_loop()",
        "detail": "app.tasks.job_application",
        "documentation": {}
    },
    {
        "label": "apply_to_job",
        "kind": 2,
        "importPath": "app.tasks.job_application",
        "description": "app.tasks.job_application",
        "peekOfCode": "def apply_to_job(self, application_data: Dict[str, Any]):\n    \"\"\"Main task to apply to a job\"\"\"\n    worker_id = f\"worker_{current_task.request.hostname}_{os.getpid()}\"\n    user_id = application_data['user_id']\n    application_id = application_data['application_id']\n    job_id = application_data['job_id']\n    should_submit = application_data.get('should_submit', False)\n    overrided_form_questions = application_data.get('form_questions', None)\n    logger.info(f\"Starting job application task for job {job_id}, application {application_id}\")\n    driver = None",
        "detail": "app.tasks.job_application",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.tasks.job_application",
        "description": "app.tasks.job_application",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef log_to_firestore(user_id: str, application_id: str, level: str, message: str):\n    \"\"\"Helper function to log messages to Firestore\"\"\"\n    try:\n        firestore_manager.add_application_log(user_id, application_id, level, message)\n    except Exception as e:\n        logger.error(f\"Failed to log to Firestore: {e}\")\ndef _run_async_websocket(func, *args, **kwargs):\n    \"\"\"Run an async WebSocket function in a separate thread\"\"\"\n    try:",
        "detail": "app.tasks.job_application",
        "documentation": {}
    },
    {
        "label": "signal_handler",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def signal_handler(signum, frame):\n    \"\"\"Handle shutdown signals gracefully\"\"\"\n    global _shutdown_initiated\n    if not _shutdown_initiated:\n        _shutdown_initiated = True\n        logger.info(f\"🛑 Received signal {signum}, initiating graceful shutdown...\")\n        try:\n            cleanup_resources()\n            logger.info(\"✅ Graceful shutdown completed\")\n        except Exception as e:",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "cleanup_resources",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def cleanup_resources():\n    \"\"\"Cleanup function for atexit handler and signal handlers\"\"\"\n    global _shutdown_initiated\n    if _shutdown_initiated:\n        return  # Already cleaning up\n    _shutdown_initiated = True\n    try:\n        # Close all browser drivers\n        logger.info(\"🌐 Closing browser pool...\")\n        browser_pool.close_all()",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Global flag to track shutdown state\n_shutdown_initiated = False\ndef signal_handler(signum, frame):\n    \"\"\"Handle shutdown signals gracefully\"\"\"\n    global _shutdown_initiated\n    if not _shutdown_initiated:\n        _shutdown_initiated = True\n        logger.info(f\"🛑 Received signal {signum}, initiating graceful shutdown...\")\n        try:",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "_shutdown_initiated",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "_shutdown_initiated = False\ndef signal_handler(signum, frame):\n    \"\"\"Handle shutdown signals gracefully\"\"\"\n    global _shutdown_initiated\n    if not _shutdown_initiated:\n        _shutdown_initiated = True\n        logger.info(f\"🛑 Received signal {signum}, initiating graceful shutdown...\")\n        try:\n            cleanup_resources()\n            logger.info(\"✅ Graceful shutdown completed\")",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = FastAPI(\n    title=\"ApplyWise API\",\n    description=\"Backend API for ApplyWise job application automation\",\n    version=\"1.0.0\",\n    lifespan=lifespan\n)\n# Configure CORS\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=settings.CORS_ORIGINS,",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "test_network_connectivity",
        "kind": 2,
        "importPath": "scripts.check_db_connection",
        "description": "scripts.check_db_connection",
        "peekOfCode": "def test_network_connectivity(host, port):\n    \"\"\"Test basic network connectivity to host:port\"\"\"\n    print(f\"🌐 Testing network connectivity to {host}:{port}\")\n    try:\n        sock = socket.create_connection((host, port), timeout=10)\n        sock.close()\n        print(\"✅ Network connectivity OK\")\n        return True\n    except socket.timeout:\n        print(\"❌ Connection timeout - possible network/VPN issue\")",
        "detail": "scripts.check_db_connection",
        "documentation": {}
    },
    {
        "label": "test_db_connection",
        "kind": 2,
        "importPath": "scripts.check_db_connection",
        "description": "scripts.check_db_connection",
        "peekOfCode": "def test_db_connection():\n    \"\"\"Test PostgreSQL database connection\"\"\"\n    print(\"🐘 Testing PostgreSQL connection\")\n    db_params = {\n        \"host\": os.getenv(\"POSTGRES_HOST\", \"172.31.85.170\"),\n        \"database\": os.getenv(\"POSTGRES_DB\", \"applywise\"),\n        \"user\": os.getenv(\"POSTGRES_USER\", \"postgres\"),\n        \"password\": os.getenv(\"POSTGRES_PASSWORD\"),\n        \"port\": int(os.getenv(\"POSTGRES_PORT\", \"5432\")),\n        \"connect_timeout\": 10,",
        "detail": "scripts.check_db_connection",
        "documentation": {}
    },
    {
        "label": "get_public_ip",
        "kind": 2,
        "importPath": "scripts.check_db_connection",
        "description": "scripts.check_db_connection",
        "peekOfCode": "def get_public_ip():\n    \"\"\"Get your current public IP address\"\"\"\n    try:\n        import requests\n        response = requests.get('https://httpbin.org/ip', timeout=5)\n        ip = response.json()['origin']\n        print(f\"🌍 Your public IP: {ip}\")\n        return ip\n    except Exception as e:\n        print(f\"⚠️ Could not determine public IP: {e}\")",
        "detail": "scripts.check_db_connection",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "scripts.check_db_connection",
        "description": "scripts.check_db_connection",
        "peekOfCode": "def main():\n    \"\"\"Main diagnostic function\"\"\"\n    print(\"🔍 PostgreSQL Connection Diagnostics\")\n    print(\"=\" * 50)\n    # Get environment info\n    print(f\"📁 Working directory: {os.getcwd()}\")\n    print(f\"🐍 Python version: {sys.version}\")\n    # Check if .env file exists\n    env_file = \".env\"\n    if os.path.exists(env_file):",
        "detail": "scripts.check_db_connection",
        "documentation": {}
    },
    {
        "label": "create_jobs_table",
        "kind": 2,
        "importPath": "scripts.reset_db",
        "description": "scripts.reset_db",
        "peekOfCode": "def create_jobs_table(postgres_manager: PostgresManager):\n    \"\"\"Create jobs table if it doesn't exist\"\"\"\n    print(\"[5] Dropping existing jobs table...\")\n    start_time = time.time()\n    session = postgres_manager.SessionLocal()\n    try:\n        session.execute(text(\"DROP TABLE IF EXISTS jobs CASCADE\"))\n        session.commit()\n    finally:\n        session.close()",
        "detail": "scripts.reset_db",
        "documentation": {}
    },
    {
        "label": "insert_sample_job",
        "kind": 2,
        "importPath": "scripts.reset_db",
        "description": "scripts.reset_db",
        "peekOfCode": "def insert_sample_job(postgres_manager: PostgresManager):\n    \"\"\"Insert a sample job into the jobs table\"\"\"\n    print(\"[9] Preparing sample job data...\")\n    # Generate a unique string ID\n    import uuid\n    import json\n    job_id = str(uuid.uuid4())\n    job_data = {\n        \"id\": job_id,\n        \"title\": \"Senior Software Engineer\",",
        "detail": "scripts.reset_db",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "scripts.reset_db",
        "description": "scripts.reset_db",
        "peekOfCode": "def main():\n    print(\"[1] Starting job insertion script...\")\n    script_start_time = time.time()\n    try:\n        # Initialize PostgresManager\n        print(\"[2] Initializing PostgresManager...\")\n        start_time = time.time()\n        postgres_manager = PostgresManager()\n        end_time = time.time()\n        print(f\"[3] PostgresManager initialized in {end_time - start_time:.2f} seconds\")",
        "detail": "scripts.reset_db",
        "documentation": {}
    },
    {
        "label": "test_health_check",
        "kind": 2,
        "importPath": "tests.test_api",
        "description": "tests.test_api",
        "peekOfCode": "def test_health_check():\n    \"\"\"Test the health check endpoint\"\"\"\n    print(\"🔍 Testing health check...\")\n    response = requests.get(f\"{API_BASE_URL}/health\")\n    if response.status_code == 200:\n        print(\"✅ Health check passed\")\n        print(json.dumps(response.json(), indent=2))\n    else:\n        print(f\"❌ Health check failed: {response.status_code}\")\n    return response.status_code == 200",
        "detail": "tests.test_api",
        "documentation": {}
    },
    {
        "label": "test_apply_job",
        "kind": 2,
        "importPath": "tests.test_api",
        "description": "tests.test_api",
        "peekOfCode": "def test_apply_job():\n    \"\"\"Test job application submission\"\"\"\n    print(\"\\n📝 Testing job application...\")\n    # Sample job application data\n    application_data = {\n        \"user_id\": TEST_USER_ID,\n        \"job_url\": \"https://www.linkedin.com/jobs/view/3750000000\",\n        \"resume_data\": {\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\",",
        "detail": "tests.test_api",
        "documentation": {}
    },
    {
        "label": "test_apply_job_duplicate",
        "kind": 2,
        "importPath": "tests.test_api",
        "description": "tests.test_api",
        "peekOfCode": "def test_apply_job_duplicate():\n    \"\"\"Test applying to the same job again (should use existing application)\"\"\"\n    print(\"\\n🔄 Testing duplicate job application...\")\n    # Same job URL as before\n    application_data = {\n        \"user_id\": TEST_USER_ID,\n        \"job_url\": \"https://www.linkedin.com/jobs/view/3750000000\",\n        \"resume_data\": {\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\",",
        "detail": "tests.test_api",
        "documentation": {}
    },
    {
        "label": "test_task_status",
        "kind": 2,
        "importPath": "tests.test_api",
        "description": "tests.test_api",
        "peekOfCode": "def test_task_status(task_id: str):\n    \"\"\"Test task status checking\"\"\"\n    print(f\"\\n📊 Checking task status for {task_id}...\")\n    max_attempts = 30\n    attempt = 0\n    while attempt < max_attempts:\n        response = requests.get(f\"{API_BASE_URL}/status/{task_id}\")\n        if response.status_code == 200:\n            result = response.json()\n            status = result['status']",
        "detail": "tests.test_api",
        "documentation": {}
    },
    {
        "label": "test_get_user_applications",
        "kind": 2,
        "importPath": "tests.test_api",
        "description": "tests.test_api",
        "peekOfCode": "def test_get_user_applications():\n    \"\"\"Test getting list of applications for a user\"\"\"\n    print(f\"\\n📋 Getting applications for user {TEST_USER_ID}...\")\n    response = requests.get(f\"{API_BASE_URL}/users/{TEST_USER_ID}/applications\")\n    if response.status_code == 200:\n        result = response.json()\n        applications = result['applications']\n        print(f\"✅ Found {len(applications)} applications\")\n        print(f\"Total count: {result['total_count']}\")\n        print(f\"Has more: {result['has_more']}\")",
        "detail": "tests.test_api",
        "documentation": {}
    },
    {
        "label": "test_get_specific_application",
        "kind": 2,
        "importPath": "tests.test_api",
        "description": "tests.test_api",
        "peekOfCode": "def test_get_specific_application(application_id: str):\n    \"\"\"Test getting a specific application\"\"\"\n    print(f\"\\n📄 Getting specific application {application_id}...\")\n    response = requests.get(f\"{API_BASE_URL}/users/{TEST_USER_ID}/applications/{application_id}\")\n    if response.status_code == 200:\n        application = response.json()\n        print(\"✅ Application retrieved successfully\")\n        print(f\"  - Job ID: {application['job_id']}\")\n        print(f\"  - Status: {application['status']}\")\n        print(f\"  - Job URL: {application['job_url']}\")",
        "detail": "tests.test_api",
        "documentation": {}
    },
    {
        "label": "test_get_application_logs",
        "kind": 2,
        "importPath": "tests.test_api",
        "description": "tests.test_api",
        "peekOfCode": "def test_get_application_logs(application_id: str):\n    \"\"\"Test getting application logs\"\"\"\n    print(f\"\\n📝 Getting logs for application {application_id}...\")\n    response = requests.get(f\"{API_BASE_URL}/users/{TEST_USER_ID}/applications/{application_id}/logs\")\n    if response.status_code == 200:\n        result = response.json()\n        logs = result['logs']\n        print(f\"✅ Found {len(logs)} log entries\")\n        for log in logs[-5:]:  # Show last 5 logs\n            print(f\"  - [{log.get('level', 'info')}] {log.get('message', '')}\")",
        "detail": "tests.test_api",
        "documentation": {}
    },
    {
        "label": "test_worker_status",
        "kind": 2,
        "importPath": "tests.test_api",
        "description": "tests.test_api",
        "peekOfCode": "def test_worker_status():\n    \"\"\"Test worker status endpoint\"\"\"\n    print(\"\\n👷 Checking worker status...\")\n    response = requests.get(f\"{API_BASE_URL}/workers\")\n    if response.status_code == 200:\n        result = response.json()\n        print(\"✅ Worker status retrieved\")\n        # Count active tasks\n        active_tasks = result.get('active_tasks', {})\n        total_active = sum(len(tasks) for tasks in active_tasks.values())",
        "detail": "tests.test_api",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "tests.test_api",
        "description": "tests.test_api",
        "peekOfCode": "def main():\n    \"\"\"Run all tests\"\"\"\n    print(\"🧪 ApplyWise Backend API Test Suite (Firestore)\")\n    print(\"=\" * 60)\n    # Test health check\n    if not test_health_check():\n        print(\"❌ Health check failed. Make sure the API is running.\")\n        return\n    # Test worker status\n    test_worker_status()",
        "detail": "tests.test_api",
        "documentation": {}
    },
    {
        "label": "API_BASE_URL",
        "kind": 5,
        "importPath": "tests.test_api",
        "description": "tests.test_api",
        "peekOfCode": "API_BASE_URL = \"http://localhost:8000\"\nTEST_USER_ID = \"test_user_123\"  # Test user ID\ndef test_health_check():\n    \"\"\"Test the health check endpoint\"\"\"\n    print(\"🔍 Testing health check...\")\n    response = requests.get(f\"{API_BASE_URL}/health\")\n    if response.status_code == 200:\n        print(\"✅ Health check passed\")\n        print(json.dumps(response.json(), indent=2))\n    else:",
        "detail": "tests.test_api",
        "documentation": {}
    },
    {
        "label": "TEST_USER_ID",
        "kind": 5,
        "importPath": "tests.test_api",
        "description": "tests.test_api",
        "peekOfCode": "TEST_USER_ID = \"test_user_123\"  # Test user ID\ndef test_health_check():\n    \"\"\"Test the health check endpoint\"\"\"\n    print(\"🔍 Testing health check...\")\n    response = requests.get(f\"{API_BASE_URL}/health\")\n    if response.status_code == 200:\n        print(\"✅ Health check passed\")\n        print(json.dumps(response.json(), indent=2))\n    else:\n        print(f\"❌ Health check failed: {response.status_code}\")",
        "detail": "tests.test_api",
        "documentation": {}
    },
    {
        "label": "create_sample_jobs_df",
        "kind": 2,
        "importPath": "tests.test_job_summarization",
        "description": "tests.test_job_summarization",
        "peekOfCode": "def create_sample_jobs_df():\n    \"\"\"Create a sample DataFrame with job descriptions for testing.\"\"\"\n    sample_jobs = [\n        {\n            'title': 'Senior Software Engineer',\n            'company': 'TechCorp',\n            'location': 'San Francisco, CA',\n            'description': '''\n            We are looking for a Senior Software Engineer to join our team.\n            Responsibilities:",
        "detail": "tests.test_job_summarization",
        "documentation": {}
    },
    {
        "label": "test_job_summarization",
        "kind": 2,
        "importPath": "tests.test_job_summarization",
        "description": "tests.test_job_summarization",
        "peekOfCode": "def test_job_summarization():\n    \"\"\"Test the job summarization functionality.\"\"\"\n    try:\n        # Create sample user profile (minimal for testing)\n        user_profile = {\n            'fullName': 'John Doe',\n            'isProMember': True,  # Use Pro features for better results\n            'currentLocation': 'San Francisco, CA'\n        }\n        # Create sample jobs DataFrame",
        "detail": "tests.test_job_summarization",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tests.test_job_summarization",
        "description": "tests.test_job_summarization",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef create_sample_jobs_df():\n    \"\"\"Create a sample DataFrame with job descriptions for testing.\"\"\"\n    sample_jobs = [\n        {\n            'title': 'Senior Software Engineer',\n            'company': 'TechCorp',\n            'location': 'San Francisco, CA',\n            'description': '''\n            We are looking for a Senior Software Engineer to join our team.",
        "detail": "tests.test_job_summarization",
        "documentation": {}
    },
    {
        "label": "test_job_upload",
        "kind": 2,
        "importPath": "tests.test_job_upload",
        "description": "tests.test_job_upload",
        "peekOfCode": "def test_job_upload():\n    \"\"\"\n    Test uploading backend_jobs_raw.csv to the database.\n    \"\"\"\n    print(\"🧪 Testing job upload with backend_jobs_raw.csv...\")\n    # Path to the CSV file\n    csv_file = \"all_jobs_raw.csv\"\n    if not os.path.exists(csv_file):\n        print(f\"❌ CSV file not found: {csv_file}\")\n        return",
        "detail": "tests.test_job_upload",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tests.test_job_upload",
        "description": "tests.test_job_upload",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef test_job_upload():\n    \"\"\"\n    Test uploading backend_jobs_raw.csv to the database.\n    \"\"\"\n    print(\"🧪 Testing job upload with backend_jobs_raw.csv...\")\n    # Path to the CSV file\n    csv_file = \"all_jobs_raw.csv\"\n    if not os.path.exists(csv_file):\n        print(f\"❌ CSV file not found: {csv_file}\")",
        "detail": "tests.test_job_upload",
        "documentation": {}
    },
    {
        "label": "test_endpoint",
        "kind": 2,
        "importPath": "tests.test_jobs_api",
        "description": "tests.test_jobs_api",
        "peekOfCode": "def test_endpoint(endpoint: str, params: Dict[str, Any] = None, description: str = \"\") -> bool:\n    \"\"\"\n    Test an API endpoint and print results.\n    Args:\n        endpoint: API endpoint path\n        params: Query parameters\n        description: Description of the test\n    Returns:\n        bool: True if successful, False otherwise\n    \"\"\"",
        "detail": "tests.test_jobs_api",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "tests.test_jobs_api",
        "description": "tests.test_jobs_api",
        "peekOfCode": "def main():\n    \"\"\"Run all API tests.\"\"\"\n    print(\"🚀 Testing Jobs API Endpoints\")\n    print(\"=\" * 50)\n    # Check if server is running\n    print(\"\\n🔍 Checking if server is running...\")\n    try:\n        response = requests.get(BASE_URL, timeout=5)\n        if response.status_code == 200:\n            print(\"✅ Server is running!\")",
        "detail": "tests.test_jobs_api",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "tests.test_jobs_api",
        "description": "tests.test_jobs_api",
        "peekOfCode": "BASE_URL = \"http://localhost:8000/jobs\"\ndef test_endpoint(endpoint: str, params: Dict[str, Any] = None, description: str = \"\") -> bool:\n    \"\"\"\n    Test an API endpoint and print results.\n    Args:\n        endpoint: API endpoint path\n        params: Query parameters\n        description: Description of the test\n    Returns:\n        bool: True if successful, False otherwise",
        "detail": "tests.test_jobs_api",
        "documentation": {}
    },
    {
        "label": "firestore_adminCallTransformer",
        "kind": 6,
        "importPath": "venv.bin.fixup_firestore_admin_v1_keywords",
        "description": "venv.bin.fixup_firestore_admin_v1_keywords",
        "peekOfCode": "class firestore_adminCallTransformer(cst.CSTTransformer):\n    CTRL_PARAMS: Tuple[str] = ('retry', 'timeout', 'metadata')\n    METHOD_TO_PARAMS: Dict[str, Tuple[str]] = {\n        'create_database': ('parent', 'database', 'database_id', ),\n        'create_index': ('parent', 'index', ),\n        'delete_index': ('name', ),\n        'export_documents': ('name', 'collection_ids', 'output_uri_prefix', ),\n        'get_database': ('name', ),\n        'get_field': ('name', ),\n        'get_index': ('name', ),",
        "detail": "venv.bin.fixup_firestore_admin_v1_keywords",
        "documentation": {}
    },
    {
        "label": "partition",
        "kind": 2,
        "importPath": "venv.bin.fixup_firestore_admin_v1_keywords",
        "description": "venv.bin.fixup_firestore_admin_v1_keywords",
        "peekOfCode": "def partition(\n    predicate: Callable[[Any], bool],\n    iterator: Sequence[Any]\n) -> Tuple[List[Any], List[Any]]:\n    \"\"\"A stable, out-of-place partition.\"\"\"\n    results = ([], [])\n    for i in iterator:\n        results[int(predicate(i))].append(i)\n    # Returns trueList, falseList\n    return results[1], results[0]",
        "detail": "venv.bin.fixup_firestore_admin_v1_keywords",
        "documentation": {}
    },
    {
        "label": "fix_files",
        "kind": 2,
        "importPath": "venv.bin.fixup_firestore_admin_v1_keywords",
        "description": "venv.bin.fixup_firestore_admin_v1_keywords",
        "peekOfCode": "def fix_files(\n    in_dir: pathlib.Path,\n    out_dir: pathlib.Path,\n    *,\n    transformer=firestore_adminCallTransformer(),\n):\n    \"\"\"Duplicate the input dir to the output dir, fixing file method calls.\n    Preconditions:\n    * in_dir is a real directory\n    * out_dir is a real, empty directory",
        "detail": "venv.bin.fixup_firestore_admin_v1_keywords",
        "documentation": {}
    },
    {
        "label": "firestoreCallTransformer",
        "kind": 6,
        "importPath": "venv.bin.fixup_firestore_v1_keywords",
        "description": "venv.bin.fixup_firestore_v1_keywords",
        "peekOfCode": "class firestoreCallTransformer(cst.CSTTransformer):\n    CTRL_PARAMS: Tuple[str] = ('retry', 'timeout', 'metadata')\n    METHOD_TO_PARAMS: Dict[str, Tuple[str]] = {\n        'batch_get_documents': ('database', 'documents', 'mask', 'transaction', 'new_transaction', 'read_time', ),\n        'batch_write': ('database', 'writes', 'labels', ),\n        'begin_transaction': ('database', 'options', ),\n        'commit': ('database', 'writes', 'transaction', ),\n        'create_document': ('parent', 'collection_id', 'document', 'document_id', 'mask', ),\n        'delete_document': ('name', 'current_document', ),\n        'get_document': ('name', 'mask', 'transaction', 'read_time', ),",
        "detail": "venv.bin.fixup_firestore_v1_keywords",
        "documentation": {}
    },
    {
        "label": "partition",
        "kind": 2,
        "importPath": "venv.bin.fixup_firestore_v1_keywords",
        "description": "venv.bin.fixup_firestore_v1_keywords",
        "peekOfCode": "def partition(\n    predicate: Callable[[Any], bool],\n    iterator: Sequence[Any]\n) -> Tuple[List[Any], List[Any]]:\n    \"\"\"A stable, out-of-place partition.\"\"\"\n    results = ([], [])\n    for i in iterator:\n        results[int(predicate(i))].append(i)\n    # Returns trueList, falseList\n    return results[1], results[0]",
        "detail": "venv.bin.fixup_firestore_v1_keywords",
        "documentation": {}
    },
    {
        "label": "fix_files",
        "kind": 2,
        "importPath": "venv.bin.fixup_firestore_v1_keywords",
        "description": "venv.bin.fixup_firestore_v1_keywords",
        "peekOfCode": "def fix_files(\n    in_dir: pathlib.Path,\n    out_dir: pathlib.Path,\n    *,\n    transformer=firestoreCallTransformer(),\n):\n    \"\"\"Duplicate the input dir to the output dir, fixing file method calls.\n    Preconditions:\n    * in_dir is a real directory\n    * out_dir is a real, empty directory",
        "detail": "venv.bin.fixup_firestore_v1_keywords",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "venv.bin.jp",
        "description": "venv.bin.jp",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('expression')\n    parser.add_argument('-f', '--filename',\n                        help=('The filename containing the input data.  '\n                              'If a filename is not given then data is '\n                              'read from stdin.'))\n    parser.add_argument('--ast', action='store_true',\n                        help=('Pretty print the AST, do not search the data.'))\n    args = parser.parse_args()",
        "detail": "venv.bin.jp",
        "documentation": {}
    }
]